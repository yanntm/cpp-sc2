// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2clientprotocol/raw.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "s2clientprotocol/raw.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SC2APIProtocol {

namespace {

const ::google::protobuf::Descriptor* StartRaw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartRaw_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObservationRaw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObservationRaw_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadarRing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarRing_reflection_ = NULL;
const ::google::protobuf::Descriptor* PowerSource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PowerSource_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerRaw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerRaw_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnitOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnitOrder_reflection_ = NULL;
struct UnitOrderOneofInstance {
  const ::SC2APIProtocol::Point* target_world_space_pos_;
  ::google::protobuf::uint64 target_unit_tag_;
}* UnitOrder_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* PassengerUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassengerUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* RallyTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RallyTarget_reflection_ = NULL;
const ::google::protobuf::Descriptor* Unit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Unit_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapState_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;
const ::google::protobuf::Descriptor* Effect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Effect_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionRaw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionRaw_reflection_ = NULL;
struct ActionRawOneofInstance {
  const ::SC2APIProtocol::ActionRawUnitCommand* unit_command_;
  const ::SC2APIProtocol::ActionRawCameraMove* camera_move_;
  const ::SC2APIProtocol::ActionRawToggleAutocast* toggle_autocast_;
}* ActionRaw_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ActionRawUnitCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionRawUnitCommand_reflection_ = NULL;
struct ActionRawUnitCommandOneofInstance {
  const ::SC2APIProtocol::Point2D* target_world_space_pos_;
  ::google::protobuf::uint64 target_unit_tag_;
}* ActionRawUnitCommand_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ActionRawCameraMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionRawCameraMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionRawToggleAutocast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionRawToggleAutocast_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DisplayType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Alliance_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CloakState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_s2clientprotocol_2fraw_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_s2clientprotocol_2fraw_2eproto() {
  protobuf_AddDesc_s2clientprotocol_2fraw_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "s2clientprotocol/raw.proto");
  GOOGLE_CHECK(file != NULL);
  StartRaw_descriptor_ = file->message_type(0);
  static const int StartRaw_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRaw, map_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRaw, pathing_grid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRaw, terrain_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRaw, placement_grid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRaw, playable_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRaw, start_locations_),
  };
  StartRaw_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StartRaw_descriptor_,
      StartRaw::default_instance_,
      StartRaw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRaw, _has_bits_[0]),
      -1,
      -1,
      sizeof(StartRaw),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRaw, _internal_metadata_),
      -1);
  ObservationRaw_descriptor_ = file->message_type(1);
  static const int ObservationRaw_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObservationRaw, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObservationRaw, units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObservationRaw, map_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObservationRaw, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObservationRaw, effects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObservationRaw, radar_),
  };
  ObservationRaw_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObservationRaw_descriptor_,
      ObservationRaw::default_instance_,
      ObservationRaw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObservationRaw, _has_bits_[0]),
      -1,
      -1,
      sizeof(ObservationRaw),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObservationRaw, _internal_metadata_),
      -1);
  RadarRing_descriptor_ = file->message_type(2);
  static const int RadarRing_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRing, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRing, radius_),
  };
  RadarRing_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RadarRing_descriptor_,
      RadarRing::default_instance_,
      RadarRing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRing, _has_bits_[0]),
      -1,
      -1,
      sizeof(RadarRing),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRing, _internal_metadata_),
      -1);
  PowerSource_descriptor_ = file->message_type(3);
  static const int PowerSource_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerSource, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerSource, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerSource, tag_),
  };
  PowerSource_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PowerSource_descriptor_,
      PowerSource::default_instance_,
      PowerSource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerSource, _has_bits_[0]),
      -1,
      -1,
      sizeof(PowerSource),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PowerSource, _internal_metadata_),
      -1);
  PlayerRaw_descriptor_ = file->message_type(4);
  static const int PlayerRaw_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRaw, power_sources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRaw, camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRaw, upgrade_ids_),
  };
  PlayerRaw_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerRaw_descriptor_,
      PlayerRaw::default_instance_,
      PlayerRaw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRaw, _has_bits_[0]),
      -1,
      -1,
      sizeof(PlayerRaw),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRaw, _internal_metadata_),
      -1);
  UnitOrder_descriptor_ = file->message_type(5);
  static const int UnitOrder_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitOrder, ability_id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(UnitOrder_default_oneof_instance_, target_world_space_pos_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(UnitOrder_default_oneof_instance_, target_unit_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitOrder, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitOrder, target_),
  };
  UnitOrder_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UnitOrder_descriptor_,
      UnitOrder::default_instance_,
      UnitOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitOrder, _has_bits_[0]),
      -1,
      -1,
      UnitOrder_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitOrder, _oneof_case_[0]),
      sizeof(UnitOrder),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitOrder, _internal_metadata_),
      -1);
  PassengerUnit_descriptor_ = file->message_type(6);
  static const int PassengerUnit_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassengerUnit, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassengerUnit, health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassengerUnit, health_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassengerUnit, shield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassengerUnit, shield_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassengerUnit, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassengerUnit, energy_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassengerUnit, unit_type_),
  };
  PassengerUnit_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PassengerUnit_descriptor_,
      PassengerUnit::default_instance_,
      PassengerUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassengerUnit, _has_bits_[0]),
      -1,
      -1,
      sizeof(PassengerUnit),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassengerUnit, _internal_metadata_),
      -1);
  RallyTarget_descriptor_ = file->message_type(7);
  static const int RallyTarget_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RallyTarget, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RallyTarget, tag_),
  };
  RallyTarget_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RallyTarget_descriptor_,
      RallyTarget::default_instance_,
      RallyTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RallyTarget, _has_bits_[0]),
      -1,
      -1,
      sizeof(RallyTarget),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RallyTarget, _internal_metadata_),
      -1);
  Unit_descriptor_ = file->message_type(8);
  static const int Unit_offsets_[44] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, display_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, alliance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, unit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, facing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, build_progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, cloak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, buff_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, detect_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, radar_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, is_selected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, is_on_screen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, is_blip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, is_powered_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, is_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, attack_upgrade_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, armor_upgrade_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, shield_upgrade_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, health_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, shield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, shield_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, energy_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, mineral_contents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, vespene_contents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, is_flying_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, is_burrowed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, is_hallucination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, orders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, add_on_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, passengers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, cargo_space_taken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, cargo_space_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, assigned_harvesters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, ideal_harvesters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, weapon_cooldown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, engaged_target_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, buff_duration_remain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, buff_duration_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, rally_targets_),
  };
  Unit_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Unit_descriptor_,
      Unit::default_instance_,
      Unit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, _has_bits_[0]),
      -1,
      -1,
      sizeof(Unit),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unit, _internal_metadata_),
      -1);
  MapState_descriptor_ = file->message_type(9);
  static const int MapState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapState, visibility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapState, creep_),
  };
  MapState_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MapState_descriptor_,
      MapState::default_instance_,
      MapState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapState, _has_bits_[0]),
      -1,
      -1,
      sizeof(MapState),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapState, _internal_metadata_),
      -1);
  Event_descriptor_ = file->message_type(10);
  static const int Event_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, dead_units_),
  };
  Event_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _has_bits_[0]),
      -1,
      -1,
      sizeof(Event),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _internal_metadata_),
      -1);
  Effect_descriptor_ = file->message_type(11);
  static const int Effect_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Effect, effect_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Effect, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Effect, alliance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Effect, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Effect, radius_),
  };
  Effect_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Effect_descriptor_,
      Effect::default_instance_,
      Effect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Effect, _has_bits_[0]),
      -1,
      -1,
      sizeof(Effect),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Effect, _internal_metadata_),
      -1);
  ActionRaw_descriptor_ = file->message_type(12);
  static const int ActionRaw_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ActionRaw_default_oneof_instance_, unit_command_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ActionRaw_default_oneof_instance_, camera_move_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ActionRaw_default_oneof_instance_, toggle_autocast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRaw, action_),
  };
  ActionRaw_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActionRaw_descriptor_,
      ActionRaw::default_instance_,
      ActionRaw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRaw, _has_bits_[0]),
      -1,
      -1,
      ActionRaw_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRaw, _oneof_case_[0]),
      sizeof(ActionRaw),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRaw, _internal_metadata_),
      -1);
  ActionRawUnitCommand_descriptor_ = file->message_type(13);
  static const int ActionRawUnitCommand_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRawUnitCommand, ability_id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ActionRawUnitCommand_default_oneof_instance_, target_world_space_pos_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ActionRawUnitCommand_default_oneof_instance_, target_unit_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRawUnitCommand, unit_tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRawUnitCommand, queue_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRawUnitCommand, target_),
  };
  ActionRawUnitCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActionRawUnitCommand_descriptor_,
      ActionRawUnitCommand::default_instance_,
      ActionRawUnitCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRawUnitCommand, _has_bits_[0]),
      -1,
      -1,
      ActionRawUnitCommand_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRawUnitCommand, _oneof_case_[0]),
      sizeof(ActionRawUnitCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRawUnitCommand, _internal_metadata_),
      -1);
  ActionRawCameraMove_descriptor_ = file->message_type(14);
  static const int ActionRawCameraMove_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRawCameraMove, center_world_space_),
  };
  ActionRawCameraMove_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActionRawCameraMove_descriptor_,
      ActionRawCameraMove::default_instance_,
      ActionRawCameraMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRawCameraMove, _has_bits_[0]),
      -1,
      -1,
      sizeof(ActionRawCameraMove),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRawCameraMove, _internal_metadata_),
      -1);
  ActionRawToggleAutocast_descriptor_ = file->message_type(15);
  static const int ActionRawToggleAutocast_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRawToggleAutocast, ability_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRawToggleAutocast, unit_tags_),
  };
  ActionRawToggleAutocast_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActionRawToggleAutocast_descriptor_,
      ActionRawToggleAutocast::default_instance_,
      ActionRawToggleAutocast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRawToggleAutocast, _has_bits_[0]),
      -1,
      -1,
      sizeof(ActionRawToggleAutocast),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionRawToggleAutocast, _internal_metadata_),
      -1);
  DisplayType_descriptor_ = file->enum_type(0);
  Alliance_descriptor_ = file->enum_type(1);
  CloakState_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_s2clientprotocol_2fraw_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StartRaw_descriptor_, &StartRaw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObservationRaw_descriptor_, &ObservationRaw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RadarRing_descriptor_, &RadarRing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PowerSource_descriptor_, &PowerSource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerRaw_descriptor_, &PlayerRaw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UnitOrder_descriptor_, &UnitOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PassengerUnit_descriptor_, &PassengerUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RallyTarget_descriptor_, &RallyTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Unit_descriptor_, &Unit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MapState_descriptor_, &MapState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Event_descriptor_, &Event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Effect_descriptor_, &Effect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActionRaw_descriptor_, &ActionRaw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActionRawUnitCommand_descriptor_, &ActionRawUnitCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActionRawCameraMove_descriptor_, &ActionRawCameraMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActionRawToggleAutocast_descriptor_, &ActionRawToggleAutocast::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_s2clientprotocol_2fraw_2eproto() {
  delete StartRaw::default_instance_;
  delete StartRaw_reflection_;
  delete ObservationRaw::default_instance_;
  delete ObservationRaw_reflection_;
  delete RadarRing::default_instance_;
  delete RadarRing_reflection_;
  delete PowerSource::default_instance_;
  delete PowerSource_reflection_;
  delete PlayerRaw::default_instance_;
  delete PlayerRaw_reflection_;
  delete UnitOrder::default_instance_;
  delete UnitOrder_default_oneof_instance_;
  delete UnitOrder_reflection_;
  delete PassengerUnit::default_instance_;
  delete PassengerUnit_reflection_;
  delete RallyTarget::default_instance_;
  delete RallyTarget_reflection_;
  delete Unit::default_instance_;
  delete Unit_reflection_;
  delete MapState::default_instance_;
  delete MapState_reflection_;
  delete Event::default_instance_;
  delete Event_reflection_;
  delete Effect::default_instance_;
  delete Effect_reflection_;
  delete ActionRaw::default_instance_;
  delete ActionRaw_default_oneof_instance_;
  delete ActionRaw_reflection_;
  delete ActionRawUnitCommand::default_instance_;
  delete ActionRawUnitCommand_default_oneof_instance_;
  delete ActionRawUnitCommand_reflection_;
  delete ActionRawCameraMove::default_instance_;
  delete ActionRawCameraMove_reflection_;
  delete ActionRawToggleAutocast::default_instance_;
  delete ActionRawToggleAutocast_reflection_;
}

void protobuf_AddDesc_s2clientprotocol_2fraw_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_s2clientprotocol_2fraw_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SC2APIProtocol::protobuf_AddDesc_s2clientprotocol_2fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032s2clientprotocol/raw.proto\022\016SC2APIProt"
    "ocol\032\035s2clientprotocol/common.proto\"\261\002\n\010"
    "StartRaw\022)\n\010map_size\030\001 \001(\0132\027.SC2APIProto"
    "col.Size2DI\022/\n\014pathing_grid\030\002 \001(\0132\031.SC2A"
    "PIProtocol.ImageData\0221\n\016terrain_height\030\003"
    " \001(\0132\031.SC2APIProtocol.ImageData\0221\n\016place"
    "ment_grid\030\004 \001(\0132\031.SC2APIProtocol.ImageDa"
    "ta\0221\n\rplayable_area\030\005 \001(\0132\032.SC2APIProtoc"
    "ol.RectangleI\0220\n\017start_locations\030\006 \003(\0132\027"
    ".SC2APIProtocol.Point2D\"\206\002\n\016ObservationR"
    "aw\022)\n\006player\030\001 \001(\0132\031.SC2APIProtocol.Play"
    "erRaw\022#\n\005units\030\002 \003(\0132\024.SC2APIProtocol.Un"
    "it\022+\n\tmap_state\030\003 \001(\0132\030.SC2APIProtocol.M"
    "apState\022$\n\005event\030\004 \001(\0132\025.SC2APIProtocol."
    "Event\022\'\n\007effects\030\005 \003(\0132\026.SC2APIProtocol."
    "Effect\022(\n\005radar\030\006 \003(\0132\031.SC2APIProtocol.R"
    "adarRing\"\?\n\tRadarRing\022\"\n\003pos\030\001 \001(\0132\025.SC2"
    "APIProtocol.Point\022\016\n\006radius\030\002 \001(\002\"N\n\013Pow"
    "erSource\022\"\n\003pos\030\001 \001(\0132\025.SC2APIProtocol.P"
    "oint\022\016\n\006radius\030\002 \001(\002\022\013\n\003tag\030\003 \001(\004\"{\n\tPla"
    "yerRaw\0222\n\rpower_sources\030\001 \003(\0132\033.SC2APIPr"
    "otocol.PowerSource\022%\n\006camera\030\002 \001(\0132\025.SC2"
    "APIProtocol.Point\022\023\n\013upgrade_ids\030\003 \003(\r\"\217"
    "\001\n\tUnitOrder\022\022\n\nability_id\030\001 \001(\r\0227\n\026targ"
    "et_world_space_pos\030\002 \001(\0132\025.SC2APIProtoco"
    "l.PointH\000\022\031\n\017target_unit_tag\030\003 \001(\004H\000\022\020\n\010"
    "progress\030\004 \001(\002B\010\n\006target\"\233\001\n\rPassengerUn"
    "it\022\013\n\003tag\030\001 \001(\004\022\016\n\006health\030\002 \001(\002\022\022\n\nhealt"
    "h_max\030\003 \001(\002\022\016\n\006shield\030\004 \001(\002\022\022\n\nshield_ma"
    "x\030\007 \001(\002\022\016\n\006energy\030\005 \001(\002\022\022\n\nenergy_max\030\010 "
    "\001(\002\022\021\n\tunit_type\030\006 \001(\r\"@\n\013RallyTarget\022$\n"
    "\005point\030\001 \001(\0132\025.SC2APIProtocol.Point\022\013\n\003t"
    "ag\030\002 \001(\004\"\365\010\n\004Unit\0221\n\014display_type\030\001 \001(\0162"
    "\033.SC2APIProtocol.DisplayType\022*\n\010alliance"
    "\030\002 \001(\0162\030.SC2APIProtocol.Alliance\022\013\n\003tag\030"
    "\003 \001(\004\022\021\n\tunit_type\030\004 \001(\r\022\r\n\005owner\030\005 \001(\005\022"
    "\"\n\003pos\030\006 \001(\0132\025.SC2APIProtocol.Point\022\016\n\006f"
    "acing\030\007 \001(\002\022\016\n\006radius\030\010 \001(\002\022\026\n\016build_pro"
    "gress\030\t \001(\002\022)\n\005cloak\030\n \001(\0162\032.SC2APIProto"
    "col.CloakState\022\020\n\010buff_ids\030\033 \003(\r\022\024\n\014dete"
    "ct_range\030\037 \001(\002\022\023\n\013radar_range\030  \001(\002\022\023\n\013i"
    "s_selected\030\013 \001(\010\022\024\n\014is_on_screen\030\014 \001(\010\022\017"
    "\n\007is_blip\030\r \001(\010\022\022\n\nis_powered\030# \001(\010\022\021\n\ti"
    "s_active\030\' \001(\010\022\034\n\024attack_upgrade_level\030("
    " \001(\005\022\033\n\023armor_upgrade_level\030) \001(\005\022\034\n\024shi"
    "eld_upgrade_level\030* \001(\005\022\016\n\006health\030\016 \001(\002\022"
    "\022\n\nhealth_max\030\017 \001(\002\022\016\n\006shield\030\020 \001(\002\022\022\n\ns"
    "hield_max\030$ \001(\002\022\016\n\006energy\030\021 \001(\002\022\022\n\nenerg"
    "y_max\030% \001(\002\022\030\n\020mineral_contents\030\022 \001(\005\022\030\n"
    "\020vespene_contents\030\023 \001(\005\022\021\n\tis_flying\030\024 \001"
    "(\010\022\023\n\013is_burrowed\030\025 \001(\010\022\030\n\020is_hallucinat"
    "ion\030& \001(\010\022)\n\006orders\030\026 \003(\0132\031.SC2APIProtoc"
    "ol.UnitOrder\022\022\n\nadd_on_tag\030\027 \001(\004\0221\n\npass"
    "engers\030\030 \003(\0132\035.SC2APIProtocol.PassengerU"
    "nit\022\031\n\021cargo_space_taken\030\031 \001(\005\022\027\n\017cargo_"
    "space_max\030\032 \001(\005\022\033\n\023assigned_harvesters\030\034"
    " \001(\005\022\030\n\020ideal_harvesters\030\035 \001(\005\022\027\n\017weapon"
    "_cooldown\030\036 \001(\002\022\032\n\022engaged_target_tag\030\" "
    "\001(\004\022\034\n\024buff_duration_remain\030+ \001(\005\022\031\n\021buf"
    "f_duration_max\030, \001(\005\0222\n\rrally_targets\030- "
    "\003(\0132\033.SC2APIProtocol.RallyTarget\"c\n\010MapS"
    "tate\022-\n\nvisibility\030\001 \001(\0132\031.SC2APIProtoco"
    "l.ImageData\022(\n\005creep\030\002 \001(\0132\031.SC2APIProto"
    "col.ImageData\"\033\n\005Event\022\022\n\ndead_units\030\001 \003"
    "(\004\"\214\001\n\006Effect\022\021\n\teffect_id\030\001 \001(\r\022$\n\003pos\030"
    "\002 \003(\0132\027.SC2APIProtocol.Point2D\022*\n\010allian"
    "ce\030\003 \001(\0162\030.SC2APIProtocol.Alliance\022\r\n\005ow"
    "ner\030\004 \001(\005\022\016\n\006radius\030\005 \001(\002\"\323\001\n\tActionRaw\022"
    "<\n\014unit_command\030\001 \001(\0132$.SC2APIProtocol.A"
    "ctionRawUnitCommandH\000\022:\n\013camera_move\030\002 \001"
    "(\0132#.SC2APIProtocol.ActionRawCameraMoveH"
    "\000\022B\n\017toggle_autocast\030\003 \001(\0132\'.SC2APIProto"
    "col.ActionRawToggleAutocastH\000B\010\n\006action\""
    "\264\001\n\024ActionRawUnitCommand\022\022\n\nability_id\030\001"
    " \001(\005\0229\n\026target_world_space_pos\030\002 \001(\0132\027.S"
    "C2APIProtocol.Point2DH\000\022\031\n\017target_unit_t"
    "ag\030\003 \001(\004H\000\022\021\n\tunit_tags\030\004 \003(\004\022\025\n\rqueue_c"
    "ommand\030\005 \001(\010B\010\n\006target\"H\n\023ActionRawCamer"
    "aMove\0221\n\022center_world_space\030\001 \001(\0132\025.SC2A"
    "PIProtocol.Point\"@\n\027ActionRawToggleAutoc"
    "ast\022\022\n\nability_id\030\001 \001(\005\022\021\n\tunit_tags\030\002 \003"
    "(\004*E\n\013DisplayType\022\013\n\007Visible\020\001\022\014\n\010Snapsh"
    "ot\020\002\022\n\n\006Hidden\020\003\022\017\n\013Placeholder\020\004*6\n\010All"
    "iance\022\010\n\004Self\020\001\022\010\n\004Ally\020\002\022\013\n\007Neutral\020\003\022\t"
    "\n\005Enemy\020\004*e\n\nCloakState\022\022\n\016CloakedUnknow"
    "n\020\000\022\013\n\007Cloaked\020\001\022\023\n\017CloakedDetected\020\002\022\016\n"
    "\nNotCloaked\020\003\022\021\n\rCloakedAllied\020\004", 3472);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "s2clientprotocol/raw.proto", &protobuf_RegisterTypes);
  StartRaw::default_instance_ = new StartRaw();
  ObservationRaw::default_instance_ = new ObservationRaw();
  RadarRing::default_instance_ = new RadarRing();
  PowerSource::default_instance_ = new PowerSource();
  PlayerRaw::default_instance_ = new PlayerRaw();
  UnitOrder::default_instance_ = new UnitOrder();
  UnitOrder_default_oneof_instance_ = new UnitOrderOneofInstance();
  PassengerUnit::default_instance_ = new PassengerUnit();
  RallyTarget::default_instance_ = new RallyTarget();
  Unit::default_instance_ = new Unit();
  MapState::default_instance_ = new MapState();
  Event::default_instance_ = new Event();
  Effect::default_instance_ = new Effect();
  ActionRaw::default_instance_ = new ActionRaw();
  ActionRaw_default_oneof_instance_ = new ActionRawOneofInstance();
  ActionRawUnitCommand::default_instance_ = new ActionRawUnitCommand();
  ActionRawUnitCommand_default_oneof_instance_ = new ActionRawUnitCommandOneofInstance();
  ActionRawCameraMove::default_instance_ = new ActionRawCameraMove();
  ActionRawToggleAutocast::default_instance_ = new ActionRawToggleAutocast();
  StartRaw::default_instance_->InitAsDefaultInstance();
  ObservationRaw::default_instance_->InitAsDefaultInstance();
  RadarRing::default_instance_->InitAsDefaultInstance();
  PowerSource::default_instance_->InitAsDefaultInstance();
  PlayerRaw::default_instance_->InitAsDefaultInstance();
  UnitOrder::default_instance_->InitAsDefaultInstance();
  PassengerUnit::default_instance_->InitAsDefaultInstance();
  RallyTarget::default_instance_->InitAsDefaultInstance();
  Unit::default_instance_->InitAsDefaultInstance();
  MapState::default_instance_->InitAsDefaultInstance();
  Event::default_instance_->InitAsDefaultInstance();
  Effect::default_instance_->InitAsDefaultInstance();
  ActionRaw::default_instance_->InitAsDefaultInstance();
  ActionRawUnitCommand::default_instance_->InitAsDefaultInstance();
  ActionRawCameraMove::default_instance_->InitAsDefaultInstance();
  ActionRawToggleAutocast::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_s2clientprotocol_2fraw_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_s2clientprotocol_2fraw_2eproto {
  StaticDescriptorInitializer_s2clientprotocol_2fraw_2eproto() {
    protobuf_AddDesc_s2clientprotocol_2fraw_2eproto();
  }
} static_descriptor_initializer_s2clientprotocol_2fraw_2eproto_;
const ::google::protobuf::EnumDescriptor* DisplayType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DisplayType_descriptor_;
}
bool DisplayType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Alliance_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Alliance_descriptor_;
}
bool Alliance_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CloakState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloakState_descriptor_;
}
bool CloakState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartRaw::kMapSizeFieldNumber;
const int StartRaw::kPathingGridFieldNumber;
const int StartRaw::kTerrainHeightFieldNumber;
const int StartRaw::kPlacementGridFieldNumber;
const int StartRaw::kPlayableAreaFieldNumber;
const int StartRaw::kStartLocationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartRaw::StartRaw()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.StartRaw)
}

void StartRaw::InitAsDefaultInstance() {
  map_size_ = const_cast< ::SC2APIProtocol::Size2DI*>(&::SC2APIProtocol::Size2DI::default_instance());
  pathing_grid_ = const_cast< ::SC2APIProtocol::ImageData*>(&::SC2APIProtocol::ImageData::default_instance());
  terrain_height_ = const_cast< ::SC2APIProtocol::ImageData*>(&::SC2APIProtocol::ImageData::default_instance());
  placement_grid_ = const_cast< ::SC2APIProtocol::ImageData*>(&::SC2APIProtocol::ImageData::default_instance());
  playable_area_ = const_cast< ::SC2APIProtocol::RectangleI*>(&::SC2APIProtocol::RectangleI::default_instance());
}

StartRaw::StartRaw(const StartRaw& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.StartRaw)
}

void StartRaw::SharedCtor() {
  _cached_size_ = 0;
  map_size_ = NULL;
  pathing_grid_ = NULL;
  terrain_height_ = NULL;
  placement_grid_ = NULL;
  playable_area_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartRaw::~StartRaw() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.StartRaw)
  SharedDtor();
}

void StartRaw::SharedDtor() {
  if (this != default_instance_) {
    delete map_size_;
    delete pathing_grid_;
    delete terrain_height_;
    delete placement_grid_;
    delete playable_area_;
  }
}

void StartRaw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartRaw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartRaw_descriptor_;
}

const StartRaw& StartRaw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fraw_2eproto();
  return *default_instance_;
}

StartRaw* StartRaw::default_instance_ = NULL;

StartRaw* StartRaw::New(::google::protobuf::Arena* arena) const {
  StartRaw* n = new StartRaw;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartRaw::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.StartRaw)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_map_size()) {
      if (map_size_ != NULL) map_size_->::SC2APIProtocol::Size2DI::Clear();
    }
    if (has_pathing_grid()) {
      if (pathing_grid_ != NULL) pathing_grid_->::SC2APIProtocol::ImageData::Clear();
    }
    if (has_terrain_height()) {
      if (terrain_height_ != NULL) terrain_height_->::SC2APIProtocol::ImageData::Clear();
    }
    if (has_placement_grid()) {
      if (placement_grid_ != NULL) placement_grid_->::SC2APIProtocol::ImageData::Clear();
    }
    if (has_playable_area()) {
      if (playable_area_ != NULL) playable_area_->::SC2APIProtocol::RectangleI::Clear();
    }
  }
  start_locations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StartRaw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.StartRaw)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.Size2DI map_size = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map_size()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pathing_grid;
        break;
      }

      // optional .SC2APIProtocol.ImageData pathing_grid = 2;
      case 2: {
        if (tag == 18) {
         parse_pathing_grid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pathing_grid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_terrain_height;
        break;
      }

      // optional .SC2APIProtocol.ImageData terrain_height = 3;
      case 3: {
        if (tag == 26) {
         parse_terrain_height:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_terrain_height()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_placement_grid;
        break;
      }

      // optional .SC2APIProtocol.ImageData placement_grid = 4;
      case 4: {
        if (tag == 34) {
         parse_placement_grid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_placement_grid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_playable_area;
        break;
      }

      // optional .SC2APIProtocol.RectangleI playable_area = 5;
      case 5: {
        if (tag == 42) {
         parse_playable_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playable_area()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_start_locations;
        break;
      }

      // repeated .SC2APIProtocol.Point2D start_locations = 6;
      case 6: {
        if (tag == 50) {
         parse_start_locations:
          DO_(input->IncrementRecursionDepth());
         parse_loop_start_locations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_start_locations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_start_locations;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.StartRaw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.StartRaw)
  return false;
#undef DO_
}

void StartRaw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.StartRaw)
  // optional .SC2APIProtocol.Size2DI map_size = 1;
  if (has_map_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->map_size_, output);
  }

  // optional .SC2APIProtocol.ImageData pathing_grid = 2;
  if (has_pathing_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pathing_grid_, output);
  }

  // optional .SC2APIProtocol.ImageData terrain_height = 3;
  if (has_terrain_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->terrain_height_, output);
  }

  // optional .SC2APIProtocol.ImageData placement_grid = 4;
  if (has_placement_grid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->placement_grid_, output);
  }

  // optional .SC2APIProtocol.RectangleI playable_area = 5;
  if (has_playable_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->playable_area_, output);
  }

  // repeated .SC2APIProtocol.Point2D start_locations = 6;
  for (unsigned int i = 0, n = this->start_locations_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->start_locations(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.StartRaw)
}

::google::protobuf::uint8* StartRaw::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.StartRaw)
  // optional .SC2APIProtocol.Size2DI map_size = 1;
  if (has_map_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->map_size_, false, target);
  }

  // optional .SC2APIProtocol.ImageData pathing_grid = 2;
  if (has_pathing_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->pathing_grid_, false, target);
  }

  // optional .SC2APIProtocol.ImageData terrain_height = 3;
  if (has_terrain_height()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->terrain_height_, false, target);
  }

  // optional .SC2APIProtocol.ImageData placement_grid = 4;
  if (has_placement_grid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->placement_grid_, false, target);
  }

  // optional .SC2APIProtocol.RectangleI playable_area = 5;
  if (has_playable_area()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->playable_area_, false, target);
  }

  // repeated .SC2APIProtocol.Point2D start_locations = 6;
  for (unsigned int i = 0, n = this->start_locations_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->start_locations(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.StartRaw)
  return target;
}

int StartRaw::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.StartRaw)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional .SC2APIProtocol.Size2DI map_size = 1;
    if (has_map_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->map_size_);
    }

    // optional .SC2APIProtocol.ImageData pathing_grid = 2;
    if (has_pathing_grid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pathing_grid_);
    }

    // optional .SC2APIProtocol.ImageData terrain_height = 3;
    if (has_terrain_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->terrain_height_);
    }

    // optional .SC2APIProtocol.ImageData placement_grid = 4;
    if (has_placement_grid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->placement_grid_);
    }

    // optional .SC2APIProtocol.RectangleI playable_area = 5;
    if (has_playable_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->playable_area_);
    }

  }
  // repeated .SC2APIProtocol.Point2D start_locations = 6;
  total_size += 1 * this->start_locations_size();
  for (int i = 0; i < this->start_locations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->start_locations(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartRaw::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.StartRaw)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StartRaw* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StartRaw>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.StartRaw)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.StartRaw)
    MergeFrom(*source);
  }
}

void StartRaw::MergeFrom(const StartRaw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.StartRaw)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  start_locations_.MergeFrom(from.start_locations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_size()) {
      mutable_map_size()->::SC2APIProtocol::Size2DI::MergeFrom(from.map_size());
    }
    if (from.has_pathing_grid()) {
      mutable_pathing_grid()->::SC2APIProtocol::ImageData::MergeFrom(from.pathing_grid());
    }
    if (from.has_terrain_height()) {
      mutable_terrain_height()->::SC2APIProtocol::ImageData::MergeFrom(from.terrain_height());
    }
    if (from.has_placement_grid()) {
      mutable_placement_grid()->::SC2APIProtocol::ImageData::MergeFrom(from.placement_grid());
    }
    if (from.has_playable_area()) {
      mutable_playable_area()->::SC2APIProtocol::RectangleI::MergeFrom(from.playable_area());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StartRaw::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.StartRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartRaw::CopyFrom(const StartRaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.StartRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartRaw::IsInitialized() const {

  return true;
}

void StartRaw::Swap(StartRaw* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartRaw::InternalSwap(StartRaw* other) {
  std::swap(map_size_, other->map_size_);
  std::swap(pathing_grid_, other->pathing_grid_);
  std::swap(terrain_height_, other->terrain_height_);
  std::swap(placement_grid_, other->placement_grid_);
  std::swap(playable_area_, other->playable_area_);
  start_locations_.UnsafeArenaSwap(&other->start_locations_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartRaw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartRaw_descriptor_;
  metadata.reflection = StartRaw_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartRaw

// optional .SC2APIProtocol.Size2DI map_size = 1;
bool StartRaw::has_map_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StartRaw::set_has_map_size() {
  _has_bits_[0] |= 0x00000001u;
}
void StartRaw::clear_has_map_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void StartRaw::clear_map_size() {
  if (map_size_ != NULL) map_size_->::SC2APIProtocol::Size2DI::Clear();
  clear_has_map_size();
}
const ::SC2APIProtocol::Size2DI& StartRaw::map_size() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.StartRaw.map_size)
  return map_size_ != NULL ? *map_size_ : *default_instance_->map_size_;
}
::SC2APIProtocol::Size2DI* StartRaw::mutable_map_size() {
  set_has_map_size();
  if (map_size_ == NULL) {
    map_size_ = new ::SC2APIProtocol::Size2DI;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.StartRaw.map_size)
  return map_size_;
}
::SC2APIProtocol::Size2DI* StartRaw::release_map_size() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.StartRaw.map_size)
  clear_has_map_size();
  ::SC2APIProtocol::Size2DI* temp = map_size_;
  map_size_ = NULL;
  return temp;
}
void StartRaw::set_allocated_map_size(::SC2APIProtocol::Size2DI* map_size) {
  delete map_size_;
  map_size_ = map_size;
  if (map_size) {
    set_has_map_size();
  } else {
    clear_has_map_size();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.StartRaw.map_size)
}

// optional .SC2APIProtocol.ImageData pathing_grid = 2;
bool StartRaw::has_pathing_grid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StartRaw::set_has_pathing_grid() {
  _has_bits_[0] |= 0x00000002u;
}
void StartRaw::clear_has_pathing_grid() {
  _has_bits_[0] &= ~0x00000002u;
}
void StartRaw::clear_pathing_grid() {
  if (pathing_grid_ != NULL) pathing_grid_->::SC2APIProtocol::ImageData::Clear();
  clear_has_pathing_grid();
}
const ::SC2APIProtocol::ImageData& StartRaw::pathing_grid() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.StartRaw.pathing_grid)
  return pathing_grid_ != NULL ? *pathing_grid_ : *default_instance_->pathing_grid_;
}
::SC2APIProtocol::ImageData* StartRaw::mutable_pathing_grid() {
  set_has_pathing_grid();
  if (pathing_grid_ == NULL) {
    pathing_grid_ = new ::SC2APIProtocol::ImageData;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.StartRaw.pathing_grid)
  return pathing_grid_;
}
::SC2APIProtocol::ImageData* StartRaw::release_pathing_grid() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.StartRaw.pathing_grid)
  clear_has_pathing_grid();
  ::SC2APIProtocol::ImageData* temp = pathing_grid_;
  pathing_grid_ = NULL;
  return temp;
}
void StartRaw::set_allocated_pathing_grid(::SC2APIProtocol::ImageData* pathing_grid) {
  delete pathing_grid_;
  pathing_grid_ = pathing_grid;
  if (pathing_grid) {
    set_has_pathing_grid();
  } else {
    clear_has_pathing_grid();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.StartRaw.pathing_grid)
}

// optional .SC2APIProtocol.ImageData terrain_height = 3;
bool StartRaw::has_terrain_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StartRaw::set_has_terrain_height() {
  _has_bits_[0] |= 0x00000004u;
}
void StartRaw::clear_has_terrain_height() {
  _has_bits_[0] &= ~0x00000004u;
}
void StartRaw::clear_terrain_height() {
  if (terrain_height_ != NULL) terrain_height_->::SC2APIProtocol::ImageData::Clear();
  clear_has_terrain_height();
}
const ::SC2APIProtocol::ImageData& StartRaw::terrain_height() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.StartRaw.terrain_height)
  return terrain_height_ != NULL ? *terrain_height_ : *default_instance_->terrain_height_;
}
::SC2APIProtocol::ImageData* StartRaw::mutable_terrain_height() {
  set_has_terrain_height();
  if (terrain_height_ == NULL) {
    terrain_height_ = new ::SC2APIProtocol::ImageData;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.StartRaw.terrain_height)
  return terrain_height_;
}
::SC2APIProtocol::ImageData* StartRaw::release_terrain_height() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.StartRaw.terrain_height)
  clear_has_terrain_height();
  ::SC2APIProtocol::ImageData* temp = terrain_height_;
  terrain_height_ = NULL;
  return temp;
}
void StartRaw::set_allocated_terrain_height(::SC2APIProtocol::ImageData* terrain_height) {
  delete terrain_height_;
  terrain_height_ = terrain_height;
  if (terrain_height) {
    set_has_terrain_height();
  } else {
    clear_has_terrain_height();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.StartRaw.terrain_height)
}

// optional .SC2APIProtocol.ImageData placement_grid = 4;
bool StartRaw::has_placement_grid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void StartRaw::set_has_placement_grid() {
  _has_bits_[0] |= 0x00000008u;
}
void StartRaw::clear_has_placement_grid() {
  _has_bits_[0] &= ~0x00000008u;
}
void StartRaw::clear_placement_grid() {
  if (placement_grid_ != NULL) placement_grid_->::SC2APIProtocol::ImageData::Clear();
  clear_has_placement_grid();
}
const ::SC2APIProtocol::ImageData& StartRaw::placement_grid() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.StartRaw.placement_grid)
  return placement_grid_ != NULL ? *placement_grid_ : *default_instance_->placement_grid_;
}
::SC2APIProtocol::ImageData* StartRaw::mutable_placement_grid() {
  set_has_placement_grid();
  if (placement_grid_ == NULL) {
    placement_grid_ = new ::SC2APIProtocol::ImageData;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.StartRaw.placement_grid)
  return placement_grid_;
}
::SC2APIProtocol::ImageData* StartRaw::release_placement_grid() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.StartRaw.placement_grid)
  clear_has_placement_grid();
  ::SC2APIProtocol::ImageData* temp = placement_grid_;
  placement_grid_ = NULL;
  return temp;
}
void StartRaw::set_allocated_placement_grid(::SC2APIProtocol::ImageData* placement_grid) {
  delete placement_grid_;
  placement_grid_ = placement_grid;
  if (placement_grid) {
    set_has_placement_grid();
  } else {
    clear_has_placement_grid();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.StartRaw.placement_grid)
}

// optional .SC2APIProtocol.RectangleI playable_area = 5;
bool StartRaw::has_playable_area() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void StartRaw::set_has_playable_area() {
  _has_bits_[0] |= 0x00000010u;
}
void StartRaw::clear_has_playable_area() {
  _has_bits_[0] &= ~0x00000010u;
}
void StartRaw::clear_playable_area() {
  if (playable_area_ != NULL) playable_area_->::SC2APIProtocol::RectangleI::Clear();
  clear_has_playable_area();
}
const ::SC2APIProtocol::RectangleI& StartRaw::playable_area() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.StartRaw.playable_area)
  return playable_area_ != NULL ? *playable_area_ : *default_instance_->playable_area_;
}
::SC2APIProtocol::RectangleI* StartRaw::mutable_playable_area() {
  set_has_playable_area();
  if (playable_area_ == NULL) {
    playable_area_ = new ::SC2APIProtocol::RectangleI;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.StartRaw.playable_area)
  return playable_area_;
}
::SC2APIProtocol::RectangleI* StartRaw::release_playable_area() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.StartRaw.playable_area)
  clear_has_playable_area();
  ::SC2APIProtocol::RectangleI* temp = playable_area_;
  playable_area_ = NULL;
  return temp;
}
void StartRaw::set_allocated_playable_area(::SC2APIProtocol::RectangleI* playable_area) {
  delete playable_area_;
  playable_area_ = playable_area;
  if (playable_area) {
    set_has_playable_area();
  } else {
    clear_has_playable_area();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.StartRaw.playable_area)
}

// repeated .SC2APIProtocol.Point2D start_locations = 6;
int StartRaw::start_locations_size() const {
  return start_locations_.size();
}
void StartRaw::clear_start_locations() {
  start_locations_.Clear();
}
const ::SC2APIProtocol::Point2D& StartRaw::start_locations(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.StartRaw.start_locations)
  return start_locations_.Get(index);
}
::SC2APIProtocol::Point2D* StartRaw::mutable_start_locations(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.StartRaw.start_locations)
  return start_locations_.Mutable(index);
}
::SC2APIProtocol::Point2D* StartRaw::add_start_locations() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.StartRaw.start_locations)
  return start_locations_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::Point2D >*
StartRaw::mutable_start_locations() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.StartRaw.start_locations)
  return &start_locations_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::Point2D >&
StartRaw::start_locations() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.StartRaw.start_locations)
  return start_locations_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObservationRaw::kPlayerFieldNumber;
const int ObservationRaw::kUnitsFieldNumber;
const int ObservationRaw::kMapStateFieldNumber;
const int ObservationRaw::kEventFieldNumber;
const int ObservationRaw::kEffectsFieldNumber;
const int ObservationRaw::kRadarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObservationRaw::ObservationRaw()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ObservationRaw)
}

void ObservationRaw::InitAsDefaultInstance() {
  player_ = const_cast< ::SC2APIProtocol::PlayerRaw*>(&::SC2APIProtocol::PlayerRaw::default_instance());
  map_state_ = const_cast< ::SC2APIProtocol::MapState*>(&::SC2APIProtocol::MapState::default_instance());
  event_ = const_cast< ::SC2APIProtocol::Event*>(&::SC2APIProtocol::Event::default_instance());
}

ObservationRaw::ObservationRaw(const ObservationRaw& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ObservationRaw)
}

void ObservationRaw::SharedCtor() {
  _cached_size_ = 0;
  player_ = NULL;
  map_state_ = NULL;
  event_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObservationRaw::~ObservationRaw() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ObservationRaw)
  SharedDtor();
}

void ObservationRaw::SharedDtor() {
  if (this != default_instance_) {
    delete player_;
    delete map_state_;
    delete event_;
  }
}

void ObservationRaw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObservationRaw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObservationRaw_descriptor_;
}

const ObservationRaw& ObservationRaw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fraw_2eproto();
  return *default_instance_;
}

ObservationRaw* ObservationRaw::default_instance_ = NULL;

ObservationRaw* ObservationRaw::New(::google::protobuf::Arena* arena) const {
  ObservationRaw* n = new ObservationRaw;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObservationRaw::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ObservationRaw)
  if (_has_bits_[0 / 32] & 13u) {
    if (has_player()) {
      if (player_ != NULL) player_->::SC2APIProtocol::PlayerRaw::Clear();
    }
    if (has_map_state()) {
      if (map_state_ != NULL) map_state_->::SC2APIProtocol::MapState::Clear();
    }
    if (has_event()) {
      if (event_ != NULL) event_->::SC2APIProtocol::Event::Clear();
    }
  }
  units_.Clear();
  effects_.Clear();
  radar_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ObservationRaw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ObservationRaw)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.PlayerRaw player = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_units;
        break;
      }

      // repeated .SC2APIProtocol.Unit units = 2;
      case 2: {
        if (tag == 18) {
         parse_units:
          DO_(input->IncrementRecursionDepth());
         parse_loop_units:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_units()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_units;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_map_state;
        break;
      }

      // optional .SC2APIProtocol.MapState map_state = 3;
      case 3: {
        if (tag == 26) {
         parse_map_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_event;
        break;
      }

      // optional .SC2APIProtocol.Event event = 4;
      case 4: {
        if (tag == 34) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_effects;
        break;
      }

      // repeated .SC2APIProtocol.Effect effects = 5;
      case 5: {
        if (tag == 42) {
         parse_effects:
          DO_(input->IncrementRecursionDepth());
         parse_loop_effects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_effects()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_effects;
        if (input->ExpectTag(50)) goto parse_loop_radar;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .SC2APIProtocol.RadarRing radar = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_radar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_radar()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_radar;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ObservationRaw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ObservationRaw)
  return false;
#undef DO_
}

void ObservationRaw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ObservationRaw)
  // optional .SC2APIProtocol.PlayerRaw player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player_, output);
  }

  // repeated .SC2APIProtocol.Unit units = 2;
  for (unsigned int i = 0, n = this->units_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->units(i), output);
  }

  // optional .SC2APIProtocol.MapState map_state = 3;
  if (has_map_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->map_state_, output);
  }

  // optional .SC2APIProtocol.Event event = 4;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->event_, output);
  }

  // repeated .SC2APIProtocol.Effect effects = 5;
  for (unsigned int i = 0, n = this->effects_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->effects(i), output);
  }

  // repeated .SC2APIProtocol.RadarRing radar = 6;
  for (unsigned int i = 0, n = this->radar_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->radar(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ObservationRaw)
}

::google::protobuf::uint8* ObservationRaw::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ObservationRaw)
  // optional .SC2APIProtocol.PlayerRaw player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->player_, false, target);
  }

  // repeated .SC2APIProtocol.Unit units = 2;
  for (unsigned int i = 0, n = this->units_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->units(i), false, target);
  }

  // optional .SC2APIProtocol.MapState map_state = 3;
  if (has_map_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->map_state_, false, target);
  }

  // optional .SC2APIProtocol.Event event = 4;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->event_, false, target);
  }

  // repeated .SC2APIProtocol.Effect effects = 5;
  for (unsigned int i = 0, n = this->effects_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->effects(i), false, target);
  }

  // repeated .SC2APIProtocol.RadarRing radar = 6;
  for (unsigned int i = 0, n = this->radar_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->radar(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ObservationRaw)
  return target;
}

int ObservationRaw::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ObservationRaw)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 13u) {
    // optional .SC2APIProtocol.PlayerRaw player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->player_);
    }

    // optional .SC2APIProtocol.MapState map_state = 3;
    if (has_map_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->map_state_);
    }

    // optional .SC2APIProtocol.Event event = 4;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->event_);
    }

  }
  // repeated .SC2APIProtocol.Unit units = 2;
  total_size += 1 * this->units_size();
  for (int i = 0; i < this->units_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->units(i));
  }

  // repeated .SC2APIProtocol.Effect effects = 5;
  total_size += 1 * this->effects_size();
  for (int i = 0; i < this->effects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effects(i));
  }

  // repeated .SC2APIProtocol.RadarRing radar = 6;
  total_size += 1 * this->radar_size();
  for (int i = 0; i < this->radar_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->radar(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObservationRaw::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ObservationRaw)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObservationRaw* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObservationRaw>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ObservationRaw)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ObservationRaw)
    MergeFrom(*source);
  }
}

void ObservationRaw::MergeFrom(const ObservationRaw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ObservationRaw)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  units_.MergeFrom(from.units_);
  effects_.MergeFrom(from.effects_);
  radar_.MergeFrom(from.radar_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player()) {
      mutable_player()->::SC2APIProtocol::PlayerRaw::MergeFrom(from.player());
    }
    if (from.has_map_state()) {
      mutable_map_state()->::SC2APIProtocol::MapState::MergeFrom(from.map_state());
    }
    if (from.has_event()) {
      mutable_event()->::SC2APIProtocol::Event::MergeFrom(from.event());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ObservationRaw::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ObservationRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObservationRaw::CopyFrom(const ObservationRaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ObservationRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservationRaw::IsInitialized() const {

  return true;
}

void ObservationRaw::Swap(ObservationRaw* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObservationRaw::InternalSwap(ObservationRaw* other) {
  std::swap(player_, other->player_);
  units_.UnsafeArenaSwap(&other->units_);
  std::swap(map_state_, other->map_state_);
  std::swap(event_, other->event_);
  effects_.UnsafeArenaSwap(&other->effects_);
  radar_.UnsafeArenaSwap(&other->radar_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObservationRaw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObservationRaw_descriptor_;
  metadata.reflection = ObservationRaw_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObservationRaw

// optional .SC2APIProtocol.PlayerRaw player = 1;
bool ObservationRaw::has_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObservationRaw::set_has_player() {
  _has_bits_[0] |= 0x00000001u;
}
void ObservationRaw::clear_has_player() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObservationRaw::clear_player() {
  if (player_ != NULL) player_->::SC2APIProtocol::PlayerRaw::Clear();
  clear_has_player();
}
const ::SC2APIProtocol::PlayerRaw& ObservationRaw::player() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ObservationRaw.player)
  return player_ != NULL ? *player_ : *default_instance_->player_;
}
::SC2APIProtocol::PlayerRaw* ObservationRaw::mutable_player() {
  set_has_player();
  if (player_ == NULL) {
    player_ = new ::SC2APIProtocol::PlayerRaw;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ObservationRaw.player)
  return player_;
}
::SC2APIProtocol::PlayerRaw* ObservationRaw::release_player() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ObservationRaw.player)
  clear_has_player();
  ::SC2APIProtocol::PlayerRaw* temp = player_;
  player_ = NULL;
  return temp;
}
void ObservationRaw::set_allocated_player(::SC2APIProtocol::PlayerRaw* player) {
  delete player_;
  player_ = player;
  if (player) {
    set_has_player();
  } else {
    clear_has_player();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ObservationRaw.player)
}

// repeated .SC2APIProtocol.Unit units = 2;
int ObservationRaw::units_size() const {
  return units_.size();
}
void ObservationRaw::clear_units() {
  units_.Clear();
}
const ::SC2APIProtocol::Unit& ObservationRaw::units(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ObservationRaw.units)
  return units_.Get(index);
}
::SC2APIProtocol::Unit* ObservationRaw::mutable_units(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ObservationRaw.units)
  return units_.Mutable(index);
}
::SC2APIProtocol::Unit* ObservationRaw::add_units() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.ObservationRaw.units)
  return units_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::Unit >*
ObservationRaw::mutable_units() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.ObservationRaw.units)
  return &units_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::Unit >&
ObservationRaw::units() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.ObservationRaw.units)
  return units_;
}

// optional .SC2APIProtocol.MapState map_state = 3;
bool ObservationRaw::has_map_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ObservationRaw::set_has_map_state() {
  _has_bits_[0] |= 0x00000004u;
}
void ObservationRaw::clear_has_map_state() {
  _has_bits_[0] &= ~0x00000004u;
}
void ObservationRaw::clear_map_state() {
  if (map_state_ != NULL) map_state_->::SC2APIProtocol::MapState::Clear();
  clear_has_map_state();
}
const ::SC2APIProtocol::MapState& ObservationRaw::map_state() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ObservationRaw.map_state)
  return map_state_ != NULL ? *map_state_ : *default_instance_->map_state_;
}
::SC2APIProtocol::MapState* ObservationRaw::mutable_map_state() {
  set_has_map_state();
  if (map_state_ == NULL) {
    map_state_ = new ::SC2APIProtocol::MapState;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ObservationRaw.map_state)
  return map_state_;
}
::SC2APIProtocol::MapState* ObservationRaw::release_map_state() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ObservationRaw.map_state)
  clear_has_map_state();
  ::SC2APIProtocol::MapState* temp = map_state_;
  map_state_ = NULL;
  return temp;
}
void ObservationRaw::set_allocated_map_state(::SC2APIProtocol::MapState* map_state) {
  delete map_state_;
  map_state_ = map_state;
  if (map_state) {
    set_has_map_state();
  } else {
    clear_has_map_state();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ObservationRaw.map_state)
}

// optional .SC2APIProtocol.Event event = 4;
bool ObservationRaw::has_event() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ObservationRaw::set_has_event() {
  _has_bits_[0] |= 0x00000008u;
}
void ObservationRaw::clear_has_event() {
  _has_bits_[0] &= ~0x00000008u;
}
void ObservationRaw::clear_event() {
  if (event_ != NULL) event_->::SC2APIProtocol::Event::Clear();
  clear_has_event();
}
const ::SC2APIProtocol::Event& ObservationRaw::event() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ObservationRaw.event)
  return event_ != NULL ? *event_ : *default_instance_->event_;
}
::SC2APIProtocol::Event* ObservationRaw::mutable_event() {
  set_has_event();
  if (event_ == NULL) {
    event_ = new ::SC2APIProtocol::Event;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ObservationRaw.event)
  return event_;
}
::SC2APIProtocol::Event* ObservationRaw::release_event() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ObservationRaw.event)
  clear_has_event();
  ::SC2APIProtocol::Event* temp = event_;
  event_ = NULL;
  return temp;
}
void ObservationRaw::set_allocated_event(::SC2APIProtocol::Event* event) {
  delete event_;
  event_ = event;
  if (event) {
    set_has_event();
  } else {
    clear_has_event();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ObservationRaw.event)
}

// repeated .SC2APIProtocol.Effect effects = 5;
int ObservationRaw::effects_size() const {
  return effects_.size();
}
void ObservationRaw::clear_effects() {
  effects_.Clear();
}
const ::SC2APIProtocol::Effect& ObservationRaw::effects(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ObservationRaw.effects)
  return effects_.Get(index);
}
::SC2APIProtocol::Effect* ObservationRaw::mutable_effects(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ObservationRaw.effects)
  return effects_.Mutable(index);
}
::SC2APIProtocol::Effect* ObservationRaw::add_effects() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.ObservationRaw.effects)
  return effects_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::Effect >*
ObservationRaw::mutable_effects() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.ObservationRaw.effects)
  return &effects_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::Effect >&
ObservationRaw::effects() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.ObservationRaw.effects)
  return effects_;
}

// repeated .SC2APIProtocol.RadarRing radar = 6;
int ObservationRaw::radar_size() const {
  return radar_.size();
}
void ObservationRaw::clear_radar() {
  radar_.Clear();
}
const ::SC2APIProtocol::RadarRing& ObservationRaw::radar(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ObservationRaw.radar)
  return radar_.Get(index);
}
::SC2APIProtocol::RadarRing* ObservationRaw::mutable_radar(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ObservationRaw.radar)
  return radar_.Mutable(index);
}
::SC2APIProtocol::RadarRing* ObservationRaw::add_radar() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.ObservationRaw.radar)
  return radar_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::RadarRing >*
ObservationRaw::mutable_radar() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.ObservationRaw.radar)
  return &radar_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::RadarRing >&
ObservationRaw::radar() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.ObservationRaw.radar)
  return radar_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RadarRing::kPosFieldNumber;
const int RadarRing::kRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RadarRing::RadarRing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RadarRing)
}

void RadarRing::InitAsDefaultInstance() {
  pos_ = const_cast< ::SC2APIProtocol::Point*>(&::SC2APIProtocol::Point::default_instance());
}

RadarRing::RadarRing(const RadarRing& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RadarRing)
}

void RadarRing::SharedCtor() {
  _cached_size_ = 0;
  pos_ = NULL;
  radius_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarRing::~RadarRing() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RadarRing)
  SharedDtor();
}

void RadarRing::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void RadarRing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarRing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarRing_descriptor_;
}

const RadarRing& RadarRing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fraw_2eproto();
  return *default_instance_;
}

RadarRing* RadarRing::default_instance_ = NULL;

RadarRing* RadarRing::New(::google::protobuf::Arena* arena) const {
  RadarRing* n = new RadarRing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RadarRing::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RadarRing)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_pos()) {
      if (pos_ != NULL) pos_->::SC2APIProtocol::Point::Clear();
    }
    radius_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RadarRing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RadarRing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.Point pos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_radius;
        break;
      }

      // optional float radius = 2;
      case 2: {
        if (tag == 21) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RadarRing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RadarRing)
  return false;
#undef DO_
}

void RadarRing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RadarRing)
  // optional .SC2APIProtocol.Point pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pos_, output);
  }

  // optional float radius = 2;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->radius(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RadarRing)
}

::google::protobuf::uint8* RadarRing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RadarRing)
  // optional .SC2APIProtocol.Point pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pos_, false, target);
  }

  // optional float radius = 2;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->radius(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RadarRing)
  return target;
}

int RadarRing::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RadarRing)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .SC2APIProtocol.Point pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pos_);
    }

    // optional float radius = 2;
    if (has_radius()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarRing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RadarRing)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RadarRing* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RadarRing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RadarRing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RadarRing)
    MergeFrom(*source);
  }
}

void RadarRing::MergeFrom(const RadarRing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RadarRing)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      mutable_pos()->::SC2APIProtocol::Point::MergeFrom(from.pos());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RadarRing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RadarRing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarRing::CopyFrom(const RadarRing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RadarRing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarRing::IsInitialized() const {

  return true;
}

void RadarRing::Swap(RadarRing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RadarRing::InternalSwap(RadarRing* other) {
  std::swap(pos_, other->pos_);
  std::swap(radius_, other->radius_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RadarRing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarRing_descriptor_;
  metadata.reflection = RadarRing_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RadarRing

// optional .SC2APIProtocol.Point pos = 1;
bool RadarRing::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RadarRing::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
void RadarRing::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
void RadarRing::clear_pos() {
  if (pos_ != NULL) pos_->::SC2APIProtocol::Point::Clear();
  clear_has_pos();
}
const ::SC2APIProtocol::Point& RadarRing::pos() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RadarRing.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
::SC2APIProtocol::Point* RadarRing::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::SC2APIProtocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RadarRing.pos)
  return pos_;
}
::SC2APIProtocol::Point* RadarRing::release_pos() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.RadarRing.pos)
  clear_has_pos();
  ::SC2APIProtocol::Point* temp = pos_;
  pos_ = NULL;
  return temp;
}
void RadarRing::set_allocated_pos(::SC2APIProtocol::Point* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.RadarRing.pos)
}

// optional float radius = 2;
bool RadarRing::has_radius() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RadarRing::set_has_radius() {
  _has_bits_[0] |= 0x00000002u;
}
void RadarRing::clear_has_radius() {
  _has_bits_[0] &= ~0x00000002u;
}
void RadarRing::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
 float RadarRing::radius() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RadarRing.radius)
  return radius_;
}
 void RadarRing::set_radius(float value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RadarRing.radius)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PowerSource::kPosFieldNumber;
const int PowerSource::kRadiusFieldNumber;
const int PowerSource::kTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PowerSource::PowerSource()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.PowerSource)
}

void PowerSource::InitAsDefaultInstance() {
  pos_ = const_cast< ::SC2APIProtocol::Point*>(&::SC2APIProtocol::Point::default_instance());
}

PowerSource::PowerSource(const PowerSource& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.PowerSource)
}

void PowerSource::SharedCtor() {
  _cached_size_ = 0;
  pos_ = NULL;
  radius_ = 0;
  tag_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PowerSource::~PowerSource() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.PowerSource)
  SharedDtor();
}

void PowerSource::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void PowerSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PowerSource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PowerSource_descriptor_;
}

const PowerSource& PowerSource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fraw_2eproto();
  return *default_instance_;
}

PowerSource* PowerSource::default_instance_ = NULL;

PowerSource* PowerSource::New(::google::protobuf::Arena* arena) const {
  PowerSource* n = new PowerSource;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PowerSource::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.PowerSource)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PowerSource, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PowerSource*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(tag_, radius_);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::SC2APIProtocol::Point::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PowerSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.PowerSource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.Point pos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_radius;
        break;
      }

      // optional float radius = 2;
      case 2: {
        if (tag == 21) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tag;
        break;
      }

      // optional uint64 tag = 3;
      case 3: {
        if (tag == 24) {
         parse_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.PowerSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.PowerSource)
  return false;
#undef DO_
}

void PowerSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.PowerSource)
  // optional .SC2APIProtocol.Point pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pos_, output);
  }

  // optional float radius = 2;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->radius(), output);
  }

  // optional uint64 tag = 3;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.PowerSource)
}

::google::protobuf::uint8* PowerSource::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.PowerSource)
  // optional .SC2APIProtocol.Point pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pos_, false, target);
  }

  // optional float radius = 2;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->radius(), target);
  }

  // optional uint64 tag = 3;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.PowerSource)
  return target;
}

int PowerSource::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.PowerSource)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .SC2APIProtocol.Point pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pos_);
    }

    // optional float radius = 2;
    if (has_radius()) {
      total_size += 1 + 4;
    }

    // optional uint64 tag = 3;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tag());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PowerSource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.PowerSource)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PowerSource* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PowerSource>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.PowerSource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.PowerSource)
    MergeFrom(*source);
  }
}

void PowerSource::MergeFrom(const PowerSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.PowerSource)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      mutable_pos()->::SC2APIProtocol::Point::MergeFrom(from.pos());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PowerSource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.PowerSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PowerSource::CopyFrom(const PowerSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.PowerSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerSource::IsInitialized() const {

  return true;
}

void PowerSource::Swap(PowerSource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PowerSource::InternalSwap(PowerSource* other) {
  std::swap(pos_, other->pos_);
  std::swap(radius_, other->radius_);
  std::swap(tag_, other->tag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PowerSource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PowerSource_descriptor_;
  metadata.reflection = PowerSource_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PowerSource

// optional .SC2APIProtocol.Point pos = 1;
bool PowerSource::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PowerSource::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
void PowerSource::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
void PowerSource::clear_pos() {
  if (pos_ != NULL) pos_->::SC2APIProtocol::Point::Clear();
  clear_has_pos();
}
const ::SC2APIProtocol::Point& PowerSource::pos() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PowerSource.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
::SC2APIProtocol::Point* PowerSource::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::SC2APIProtocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.PowerSource.pos)
  return pos_;
}
::SC2APIProtocol::Point* PowerSource::release_pos() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.PowerSource.pos)
  clear_has_pos();
  ::SC2APIProtocol::Point* temp = pos_;
  pos_ = NULL;
  return temp;
}
void PowerSource::set_allocated_pos(::SC2APIProtocol::Point* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.PowerSource.pos)
}

// optional float radius = 2;
bool PowerSource::has_radius() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PowerSource::set_has_radius() {
  _has_bits_[0] |= 0x00000002u;
}
void PowerSource::clear_has_radius() {
  _has_bits_[0] &= ~0x00000002u;
}
void PowerSource::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
 float PowerSource::radius() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PowerSource.radius)
  return radius_;
}
 void PowerSource::set_radius(float value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PowerSource.radius)
}

// optional uint64 tag = 3;
bool PowerSource::has_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PowerSource::set_has_tag() {
  _has_bits_[0] |= 0x00000004u;
}
void PowerSource::clear_has_tag() {
  _has_bits_[0] &= ~0x00000004u;
}
void PowerSource::clear_tag() {
  tag_ = GOOGLE_ULONGLONG(0);
  clear_has_tag();
}
 ::google::protobuf::uint64 PowerSource::tag() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PowerSource.tag)
  return tag_;
}
 void PowerSource::set_tag(::google::protobuf::uint64 value) {
  set_has_tag();
  tag_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PowerSource.tag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerRaw::kPowerSourcesFieldNumber;
const int PlayerRaw::kCameraFieldNumber;
const int PlayerRaw::kUpgradeIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerRaw::PlayerRaw()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.PlayerRaw)
}

void PlayerRaw::InitAsDefaultInstance() {
  camera_ = const_cast< ::SC2APIProtocol::Point*>(&::SC2APIProtocol::Point::default_instance());
}

PlayerRaw::PlayerRaw(const PlayerRaw& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.PlayerRaw)
}

void PlayerRaw::SharedCtor() {
  _cached_size_ = 0;
  camera_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerRaw::~PlayerRaw() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.PlayerRaw)
  SharedDtor();
}

void PlayerRaw::SharedDtor() {
  if (this != default_instance_) {
    delete camera_;
  }
}

void PlayerRaw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRaw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerRaw_descriptor_;
}

const PlayerRaw& PlayerRaw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fraw_2eproto();
  return *default_instance_;
}

PlayerRaw* PlayerRaw::default_instance_ = NULL;

PlayerRaw* PlayerRaw::New(::google::protobuf::Arena* arena) const {
  PlayerRaw* n = new PlayerRaw;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerRaw::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.PlayerRaw)
  if (has_camera()) {
    if (camera_ != NULL) camera_->::SC2APIProtocol::Point::Clear();
  }
  power_sources_.Clear();
  upgrade_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlayerRaw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.PlayerRaw)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC2APIProtocol.PowerSource power_sources = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_power_sources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_power_sources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_power_sources;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_camera;
        break;
      }

      // optional .SC2APIProtocol.Point camera = 2;
      case 2: {
        if (tag == 18) {
         parse_camera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_upgrade_ids;
        break;
      }

      // repeated uint32 upgrade_ids = 3;
      case 3: {
        if (tag == 24) {
         parse_upgrade_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_upgrade_ids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_upgrade_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_upgrade_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.PlayerRaw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.PlayerRaw)
  return false;
#undef DO_
}

void PlayerRaw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.PlayerRaw)
  // repeated .SC2APIProtocol.PowerSource power_sources = 1;
  for (unsigned int i = 0, n = this->power_sources_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->power_sources(i), output);
  }

  // optional .SC2APIProtocol.Point camera = 2;
  if (has_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->camera_, output);
  }

  // repeated uint32 upgrade_ids = 3;
  for (int i = 0; i < this->upgrade_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->upgrade_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.PlayerRaw)
}

::google::protobuf::uint8* PlayerRaw::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.PlayerRaw)
  // repeated .SC2APIProtocol.PowerSource power_sources = 1;
  for (unsigned int i = 0, n = this->power_sources_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->power_sources(i), false, target);
  }

  // optional .SC2APIProtocol.Point camera = 2;
  if (has_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->camera_, false, target);
  }

  // repeated uint32 upgrade_ids = 3;
  for (int i = 0; i < this->upgrade_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->upgrade_ids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.PlayerRaw)
  return target;
}

int PlayerRaw::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.PlayerRaw)
  int total_size = 0;

  // optional .SC2APIProtocol.Point camera = 2;
  if (has_camera()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->camera_);
  }

  // repeated .SC2APIProtocol.PowerSource power_sources = 1;
  total_size += 1 * this->power_sources_size();
  for (int i = 0; i < this->power_sources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->power_sources(i));
  }

  // repeated uint32 upgrade_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->upgrade_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->upgrade_ids(i));
    }
    total_size += 1 * this->upgrade_ids_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRaw::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.PlayerRaw)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlayerRaw* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerRaw>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.PlayerRaw)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.PlayerRaw)
    MergeFrom(*source);
  }
}

void PlayerRaw::MergeFrom(const PlayerRaw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.PlayerRaw)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  power_sources_.MergeFrom(from.power_sources_);
  upgrade_ids_.MergeFrom(from.upgrade_ids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_camera()) {
      mutable_camera()->::SC2APIProtocol::Point::MergeFrom(from.camera());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlayerRaw::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.PlayerRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRaw::CopyFrom(const PlayerRaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.PlayerRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRaw::IsInitialized() const {

  return true;
}

void PlayerRaw::Swap(PlayerRaw* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerRaw::InternalSwap(PlayerRaw* other) {
  power_sources_.UnsafeArenaSwap(&other->power_sources_);
  std::swap(camera_, other->camera_);
  upgrade_ids_.UnsafeArenaSwap(&other->upgrade_ids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerRaw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerRaw_descriptor_;
  metadata.reflection = PlayerRaw_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerRaw

// repeated .SC2APIProtocol.PowerSource power_sources = 1;
int PlayerRaw::power_sources_size() const {
  return power_sources_.size();
}
void PlayerRaw::clear_power_sources() {
  power_sources_.Clear();
}
const ::SC2APIProtocol::PowerSource& PlayerRaw::power_sources(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PlayerRaw.power_sources)
  return power_sources_.Get(index);
}
::SC2APIProtocol::PowerSource* PlayerRaw::mutable_power_sources(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.PlayerRaw.power_sources)
  return power_sources_.Mutable(index);
}
::SC2APIProtocol::PowerSource* PlayerRaw::add_power_sources() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.PlayerRaw.power_sources)
  return power_sources_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::PowerSource >*
PlayerRaw::mutable_power_sources() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.PlayerRaw.power_sources)
  return &power_sources_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::PowerSource >&
PlayerRaw::power_sources() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.PlayerRaw.power_sources)
  return power_sources_;
}

// optional .SC2APIProtocol.Point camera = 2;
bool PlayerRaw::has_camera() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerRaw::set_has_camera() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerRaw::clear_has_camera() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerRaw::clear_camera() {
  if (camera_ != NULL) camera_->::SC2APIProtocol::Point::Clear();
  clear_has_camera();
}
const ::SC2APIProtocol::Point& PlayerRaw::camera() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PlayerRaw.camera)
  return camera_ != NULL ? *camera_ : *default_instance_->camera_;
}
::SC2APIProtocol::Point* PlayerRaw::mutable_camera() {
  set_has_camera();
  if (camera_ == NULL) {
    camera_ = new ::SC2APIProtocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.PlayerRaw.camera)
  return camera_;
}
::SC2APIProtocol::Point* PlayerRaw::release_camera() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.PlayerRaw.camera)
  clear_has_camera();
  ::SC2APIProtocol::Point* temp = camera_;
  camera_ = NULL;
  return temp;
}
void PlayerRaw::set_allocated_camera(::SC2APIProtocol::Point* camera) {
  delete camera_;
  camera_ = camera;
  if (camera) {
    set_has_camera();
  } else {
    clear_has_camera();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.PlayerRaw.camera)
}

// repeated uint32 upgrade_ids = 3;
int PlayerRaw::upgrade_ids_size() const {
  return upgrade_ids_.size();
}
void PlayerRaw::clear_upgrade_ids() {
  upgrade_ids_.Clear();
}
 ::google::protobuf::uint32 PlayerRaw::upgrade_ids(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PlayerRaw.upgrade_ids)
  return upgrade_ids_.Get(index);
}
 void PlayerRaw::set_upgrade_ids(int index, ::google::protobuf::uint32 value) {
  upgrade_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PlayerRaw.upgrade_ids)
}
 void PlayerRaw::add_upgrade_ids(::google::protobuf::uint32 value) {
  upgrade_ids_.Add(value);
  // @@protoc_insertion_point(field_add:SC2APIProtocol.PlayerRaw.upgrade_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PlayerRaw::upgrade_ids() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.PlayerRaw.upgrade_ids)
  return upgrade_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PlayerRaw::mutable_upgrade_ids() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.PlayerRaw.upgrade_ids)
  return &upgrade_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnitOrder::kAbilityIdFieldNumber;
const int UnitOrder::kTargetWorldSpacePosFieldNumber;
const int UnitOrder::kTargetUnitTagFieldNumber;
const int UnitOrder::kProgressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnitOrder::UnitOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.UnitOrder)
}

void UnitOrder::InitAsDefaultInstance() {
  UnitOrder_default_oneof_instance_->target_world_space_pos_ = const_cast< ::SC2APIProtocol::Point*>(&::SC2APIProtocol::Point::default_instance());
  UnitOrder_default_oneof_instance_->target_unit_tag_ = GOOGLE_ULONGLONG(0);
}

UnitOrder::UnitOrder(const UnitOrder& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.UnitOrder)
}

void UnitOrder::SharedCtor() {
  _cached_size_ = 0;
  ability_id_ = 0u;
  progress_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_target();
}

UnitOrder::~UnitOrder() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.UnitOrder)
  SharedDtor();
}

void UnitOrder::SharedDtor() {
  if (has_target()) {
    clear_target();
  }
  if (this != default_instance_) {
  }
}

void UnitOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnitOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitOrder_descriptor_;
}

const UnitOrder& UnitOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fraw_2eproto();
  return *default_instance_;
}

UnitOrder* UnitOrder::default_instance_ = NULL;

UnitOrder* UnitOrder::New(::google::protobuf::Arena* arena) const {
  UnitOrder* n = new UnitOrder;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnitOrder::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.UnitOrder)
  switch(target_case()) {
    case kTargetWorldSpacePos: {
      delete target_.target_world_space_pos_;
      break;
    }
    case kTargetUnitTag: {
      // No need to clear
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void UnitOrder::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.UnitOrder)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UnitOrder, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UnitOrder*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ability_id_, progress_);

#undef ZR_HELPER_
#undef ZR_

  clear_target();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UnitOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.UnitOrder)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ability_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_id_)));
          set_has_ability_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_target_world_space_pos;
        break;
      }

      // optional .SC2APIProtocol.Point target_world_space_pos = 2;
      case 2: {
        if (tag == 18) {
         parse_target_world_space_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_world_space_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_target_unit_tag;
        break;
      }

      // optional uint64 target_unit_tag = 3;
      case 3: {
        if (tag == 24) {
         parse_target_unit_tag:
          clear_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_.target_unit_tag_)));
          set_has_target_unit_tag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_progress;
        break;
      }

      // optional float progress = 4;
      case 4: {
        if (tag == 37) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.UnitOrder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.UnitOrder)
  return false;
#undef DO_
}

void UnitOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.UnitOrder)
  // optional uint32 ability_id = 1;
  if (has_ability_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ability_id(), output);
  }

  // optional .SC2APIProtocol.Point target_world_space_pos = 2;
  if (has_target_world_space_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *target_.target_world_space_pos_, output);
  }

  // optional uint64 target_unit_tag = 3;
  if (has_target_unit_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->target_unit_tag(), output);
  }

  // optional float progress = 4;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->progress(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.UnitOrder)
}

::google::protobuf::uint8* UnitOrder::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.UnitOrder)
  // optional uint32 ability_id = 1;
  if (has_ability_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ability_id(), target);
  }

  // optional .SC2APIProtocol.Point target_world_space_pos = 2;
  if (has_target_world_space_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *target_.target_world_space_pos_, false, target);
  }

  // optional uint64 target_unit_tag = 3;
  if (has_target_unit_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->target_unit_tag(), target);
  }

  // optional float progress = 4;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->progress(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.UnitOrder)
  return target;
}

int UnitOrder::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.UnitOrder)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 9u) {
    // optional uint32 ability_id = 1;
    if (has_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_id());
    }

    // optional float progress = 4;
    if (has_progress()) {
      total_size += 1 + 4;
    }

  }
  switch (target_case()) {
    // optional .SC2APIProtocol.Point target_world_space_pos = 2;
    case kTargetWorldSpacePos: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *target_.target_world_space_pos_);
      break;
    }
    // optional uint64 target_unit_tag = 3;
    case kTargetUnitTag: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_unit_tag());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnitOrder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.UnitOrder)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UnitOrder* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UnitOrder>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.UnitOrder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.UnitOrder)
    MergeFrom(*source);
  }
}

void UnitOrder::MergeFrom(const UnitOrder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.UnitOrder)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.target_case()) {
    case kTargetWorldSpacePos: {
      mutable_target_world_space_pos()->::SC2APIProtocol::Point::MergeFrom(from.target_world_space_pos());
      break;
    }
    case kTargetUnitTag: {
      set_target_unit_tag(from.target_unit_tag());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ability_id()) {
      set_ability_id(from.ability_id());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UnitOrder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.UnitOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitOrder::CopyFrom(const UnitOrder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.UnitOrder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitOrder::IsInitialized() const {

  return true;
}

void UnitOrder::Swap(UnitOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnitOrder::InternalSwap(UnitOrder* other) {
  std::swap(ability_id_, other->ability_id_);
  std::swap(progress_, other->progress_);
  std::swap(target_, other->target_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnitOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnitOrder_descriptor_;
  metadata.reflection = UnitOrder_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnitOrder

// optional uint32 ability_id = 1;
bool UnitOrder::has_ability_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UnitOrder::set_has_ability_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UnitOrder::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UnitOrder::clear_ability_id() {
  ability_id_ = 0u;
  clear_has_ability_id();
}
 ::google::protobuf::uint32 UnitOrder::ability_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitOrder.ability_id)
  return ability_id_;
}
 void UnitOrder::set_ability_id(::google::protobuf::uint32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitOrder.ability_id)
}

// optional .SC2APIProtocol.Point target_world_space_pos = 2;
bool UnitOrder::has_target_world_space_pos() const {
  return target_case() == kTargetWorldSpacePos;
}
void UnitOrder::set_has_target_world_space_pos() {
  _oneof_case_[0] = kTargetWorldSpacePos;
}
void UnitOrder::clear_target_world_space_pos() {
  if (has_target_world_space_pos()) {
    delete target_.target_world_space_pos_;
    clear_has_target();
  }
}
 const ::SC2APIProtocol::Point& UnitOrder::target_world_space_pos() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitOrder.target_world_space_pos)
  return has_target_world_space_pos()
      ? *target_.target_world_space_pos_
      : ::SC2APIProtocol::Point::default_instance();
}
::SC2APIProtocol::Point* UnitOrder::mutable_target_world_space_pos() {
  if (!has_target_world_space_pos()) {
    clear_target();
    set_has_target_world_space_pos();
    target_.target_world_space_pos_ = new ::SC2APIProtocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.UnitOrder.target_world_space_pos)
  return target_.target_world_space_pos_;
}
::SC2APIProtocol::Point* UnitOrder::release_target_world_space_pos() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.UnitOrder.target_world_space_pos)
  if (has_target_world_space_pos()) {
    clear_has_target();
    ::SC2APIProtocol::Point* temp = target_.target_world_space_pos_;
    target_.target_world_space_pos_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void UnitOrder::set_allocated_target_world_space_pos(::SC2APIProtocol::Point* target_world_space_pos) {
  clear_target();
  if (target_world_space_pos) {
    set_has_target_world_space_pos();
    target_.target_world_space_pos_ = target_world_space_pos;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.UnitOrder.target_world_space_pos)
}

// optional uint64 target_unit_tag = 3;
bool UnitOrder::has_target_unit_tag() const {
  return target_case() == kTargetUnitTag;
}
void UnitOrder::set_has_target_unit_tag() {
  _oneof_case_[0] = kTargetUnitTag;
}
void UnitOrder::clear_target_unit_tag() {
  if (has_target_unit_tag()) {
    target_.target_unit_tag_ = GOOGLE_ULONGLONG(0);
    clear_has_target();
  }
}
 ::google::protobuf::uint64 UnitOrder::target_unit_tag() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitOrder.target_unit_tag)
  if (has_target_unit_tag()) {
    return target_.target_unit_tag_;
  }
  return GOOGLE_ULONGLONG(0);
}
 void UnitOrder::set_target_unit_tag(::google::protobuf::uint64 value) {
  if (!has_target_unit_tag()) {
    clear_target();
    set_has_target_unit_tag();
  }
  target_.target_unit_tag_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitOrder.target_unit_tag)
}

// optional float progress = 4;
bool UnitOrder::has_progress() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UnitOrder::set_has_progress() {
  _has_bits_[0] |= 0x00000008u;
}
void UnitOrder::clear_has_progress() {
  _has_bits_[0] &= ~0x00000008u;
}
void UnitOrder::clear_progress() {
  progress_ = 0;
  clear_has_progress();
}
 float UnitOrder::progress() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitOrder.progress)
  return progress_;
}
 void UnitOrder::set_progress(float value) {
  set_has_progress();
  progress_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitOrder.progress)
}

bool UnitOrder::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
void UnitOrder::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
UnitOrder::TargetCase UnitOrder::target_case() const {
  return UnitOrder::TargetCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PassengerUnit::kTagFieldNumber;
const int PassengerUnit::kHealthFieldNumber;
const int PassengerUnit::kHealthMaxFieldNumber;
const int PassengerUnit::kShieldFieldNumber;
const int PassengerUnit::kShieldMaxFieldNumber;
const int PassengerUnit::kEnergyFieldNumber;
const int PassengerUnit::kEnergyMaxFieldNumber;
const int PassengerUnit::kUnitTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PassengerUnit::PassengerUnit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.PassengerUnit)
}

void PassengerUnit::InitAsDefaultInstance() {
}

PassengerUnit::PassengerUnit(const PassengerUnit& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.PassengerUnit)
}

void PassengerUnit::SharedCtor() {
  _cached_size_ = 0;
  tag_ = GOOGLE_ULONGLONG(0);
  health_ = 0;
  health_max_ = 0;
  shield_ = 0;
  shield_max_ = 0;
  energy_ = 0;
  energy_max_ = 0;
  unit_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassengerUnit::~PassengerUnit() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.PassengerUnit)
  SharedDtor();
}

void PassengerUnit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PassengerUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassengerUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassengerUnit_descriptor_;
}

const PassengerUnit& PassengerUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fraw_2eproto();
  return *default_instance_;
}

PassengerUnit* PassengerUnit::default_instance_ = NULL;

PassengerUnit* PassengerUnit::New(::google::protobuf::Arena* arena) const {
  PassengerUnit* n = new PassengerUnit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PassengerUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.PassengerUnit)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PassengerUnit, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PassengerUnit*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(tag_, unit_type_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PassengerUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.PassengerUnit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 tag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_health;
        break;
      }

      // optional float health = 2;
      case 2: {
        if (tag == 21) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_health_max;
        break;
      }

      // optional float health_max = 3;
      case 3: {
        if (tag == 29) {
         parse_health_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &health_max_)));
          set_has_health_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_shield;
        break;
      }

      // optional float shield = 4;
      case 4: {
        if (tag == 37) {
         parse_shield:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shield_)));
          set_has_shield();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_energy;
        break;
      }

      // optional float energy = 5;
      case 5: {
        if (tag == 45) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_unit_type;
        break;
      }

      // optional uint32 unit_type = 6;
      case 6: {
        if (tag == 48) {
         parse_unit_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unit_type_)));
          set_has_unit_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_shield_max;
        break;
      }

      // optional float shield_max = 7;
      case 7: {
        if (tag == 61) {
         parse_shield_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shield_max_)));
          set_has_shield_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_energy_max;
        break;
      }

      // optional float energy_max = 8;
      case 8: {
        if (tag == 69) {
         parse_energy_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energy_max_)));
          set_has_energy_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.PassengerUnit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.PassengerUnit)
  return false;
#undef DO_
}

void PassengerUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.PassengerUnit)
  // optional uint64 tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tag(), output);
  }

  // optional float health = 2;
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->health(), output);
  }

  // optional float health_max = 3;
  if (has_health_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->health_max(), output);
  }

  // optional float shield = 4;
  if (has_shield()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->shield(), output);
  }

  // optional float energy = 5;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->energy(), output);
  }

  // optional uint32 unit_type = 6;
  if (has_unit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->unit_type(), output);
  }

  // optional float shield_max = 7;
  if (has_shield_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->shield_max(), output);
  }

  // optional float energy_max = 8;
  if (has_energy_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->energy_max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.PassengerUnit)
}

::google::protobuf::uint8* PassengerUnit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.PassengerUnit)
  // optional uint64 tag = 1;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tag(), target);
  }

  // optional float health = 2;
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->health(), target);
  }

  // optional float health_max = 3;
  if (has_health_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->health_max(), target);
  }

  // optional float shield = 4;
  if (has_shield()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->shield(), target);
  }

  // optional float energy = 5;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->energy(), target);
  }

  // optional uint32 unit_type = 6;
  if (has_unit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->unit_type(), target);
  }

  // optional float shield_max = 7;
  if (has_shield_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->shield_max(), target);
  }

  // optional float energy_max = 8;
  if (has_energy_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->energy_max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.PassengerUnit)
  return target;
}

int PassengerUnit::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.PassengerUnit)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint64 tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tag());
    }

    // optional float health = 2;
    if (has_health()) {
      total_size += 1 + 4;
    }

    // optional float health_max = 3;
    if (has_health_max()) {
      total_size += 1 + 4;
    }

    // optional float shield = 4;
    if (has_shield()) {
      total_size += 1 + 4;
    }

    // optional float shield_max = 7;
    if (has_shield_max()) {
      total_size += 1 + 4;
    }

    // optional float energy = 5;
    if (has_energy()) {
      total_size += 1 + 4;
    }

    // optional float energy_max = 8;
    if (has_energy_max()) {
      total_size += 1 + 4;
    }

    // optional uint32 unit_type = 6;
    if (has_unit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unit_type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassengerUnit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.PassengerUnit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PassengerUnit* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PassengerUnit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.PassengerUnit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.PassengerUnit)
    MergeFrom(*source);
  }
}

void PassengerUnit::MergeFrom(const PassengerUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.PassengerUnit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_health()) {
      set_health(from.health());
    }
    if (from.has_health_max()) {
      set_health_max(from.health_max());
    }
    if (from.has_shield()) {
      set_shield(from.shield());
    }
    if (from.has_shield_max()) {
      set_shield_max(from.shield_max());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_energy_max()) {
      set_energy_max(from.energy_max());
    }
    if (from.has_unit_type()) {
      set_unit_type(from.unit_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PassengerUnit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.PassengerUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassengerUnit::CopyFrom(const PassengerUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.PassengerUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassengerUnit::IsInitialized() const {

  return true;
}

void PassengerUnit::Swap(PassengerUnit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PassengerUnit::InternalSwap(PassengerUnit* other) {
  std::swap(tag_, other->tag_);
  std::swap(health_, other->health_);
  std::swap(health_max_, other->health_max_);
  std::swap(shield_, other->shield_);
  std::swap(shield_max_, other->shield_max_);
  std::swap(energy_, other->energy_);
  std::swap(energy_max_, other->energy_max_);
  std::swap(unit_type_, other->unit_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PassengerUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassengerUnit_descriptor_;
  metadata.reflection = PassengerUnit_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PassengerUnit

// optional uint64 tag = 1;
bool PassengerUnit::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PassengerUnit::set_has_tag() {
  _has_bits_[0] |= 0x00000001u;
}
void PassengerUnit::clear_has_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
void PassengerUnit::clear_tag() {
  tag_ = GOOGLE_ULONGLONG(0);
  clear_has_tag();
}
 ::google::protobuf::uint64 PassengerUnit::tag() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PassengerUnit.tag)
  return tag_;
}
 void PassengerUnit::set_tag(::google::protobuf::uint64 value) {
  set_has_tag();
  tag_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PassengerUnit.tag)
}

// optional float health = 2;
bool PassengerUnit::has_health() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PassengerUnit::set_has_health() {
  _has_bits_[0] |= 0x00000002u;
}
void PassengerUnit::clear_has_health() {
  _has_bits_[0] &= ~0x00000002u;
}
void PassengerUnit::clear_health() {
  health_ = 0;
  clear_has_health();
}
 float PassengerUnit::health() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PassengerUnit.health)
  return health_;
}
 void PassengerUnit::set_health(float value) {
  set_has_health();
  health_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PassengerUnit.health)
}

// optional float health_max = 3;
bool PassengerUnit::has_health_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PassengerUnit::set_has_health_max() {
  _has_bits_[0] |= 0x00000004u;
}
void PassengerUnit::clear_has_health_max() {
  _has_bits_[0] &= ~0x00000004u;
}
void PassengerUnit::clear_health_max() {
  health_max_ = 0;
  clear_has_health_max();
}
 float PassengerUnit::health_max() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PassengerUnit.health_max)
  return health_max_;
}
 void PassengerUnit::set_health_max(float value) {
  set_has_health_max();
  health_max_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PassengerUnit.health_max)
}

// optional float shield = 4;
bool PassengerUnit::has_shield() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PassengerUnit::set_has_shield() {
  _has_bits_[0] |= 0x00000008u;
}
void PassengerUnit::clear_has_shield() {
  _has_bits_[0] &= ~0x00000008u;
}
void PassengerUnit::clear_shield() {
  shield_ = 0;
  clear_has_shield();
}
 float PassengerUnit::shield() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PassengerUnit.shield)
  return shield_;
}
 void PassengerUnit::set_shield(float value) {
  set_has_shield();
  shield_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PassengerUnit.shield)
}

// optional float shield_max = 7;
bool PassengerUnit::has_shield_max() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PassengerUnit::set_has_shield_max() {
  _has_bits_[0] |= 0x00000010u;
}
void PassengerUnit::clear_has_shield_max() {
  _has_bits_[0] &= ~0x00000010u;
}
void PassengerUnit::clear_shield_max() {
  shield_max_ = 0;
  clear_has_shield_max();
}
 float PassengerUnit::shield_max() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PassengerUnit.shield_max)
  return shield_max_;
}
 void PassengerUnit::set_shield_max(float value) {
  set_has_shield_max();
  shield_max_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PassengerUnit.shield_max)
}

// optional float energy = 5;
bool PassengerUnit::has_energy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PassengerUnit::set_has_energy() {
  _has_bits_[0] |= 0x00000020u;
}
void PassengerUnit::clear_has_energy() {
  _has_bits_[0] &= ~0x00000020u;
}
void PassengerUnit::clear_energy() {
  energy_ = 0;
  clear_has_energy();
}
 float PassengerUnit::energy() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PassengerUnit.energy)
  return energy_;
}
 void PassengerUnit::set_energy(float value) {
  set_has_energy();
  energy_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PassengerUnit.energy)
}

// optional float energy_max = 8;
bool PassengerUnit::has_energy_max() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PassengerUnit::set_has_energy_max() {
  _has_bits_[0] |= 0x00000040u;
}
void PassengerUnit::clear_has_energy_max() {
  _has_bits_[0] &= ~0x00000040u;
}
void PassengerUnit::clear_energy_max() {
  energy_max_ = 0;
  clear_has_energy_max();
}
 float PassengerUnit::energy_max() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PassengerUnit.energy_max)
  return energy_max_;
}
 void PassengerUnit::set_energy_max(float value) {
  set_has_energy_max();
  energy_max_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PassengerUnit.energy_max)
}

// optional uint32 unit_type = 6;
bool PassengerUnit::has_unit_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PassengerUnit::set_has_unit_type() {
  _has_bits_[0] |= 0x00000080u;
}
void PassengerUnit::clear_has_unit_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void PassengerUnit::clear_unit_type() {
  unit_type_ = 0u;
  clear_has_unit_type();
}
 ::google::protobuf::uint32 PassengerUnit::unit_type() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PassengerUnit.unit_type)
  return unit_type_;
}
 void PassengerUnit::set_unit_type(::google::protobuf::uint32 value) {
  set_has_unit_type();
  unit_type_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PassengerUnit.unit_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RallyTarget::kPointFieldNumber;
const int RallyTarget::kTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RallyTarget::RallyTarget()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RallyTarget)
}

void RallyTarget::InitAsDefaultInstance() {
  point_ = const_cast< ::SC2APIProtocol::Point*>(&::SC2APIProtocol::Point::default_instance());
}

RallyTarget::RallyTarget(const RallyTarget& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RallyTarget)
}

void RallyTarget::SharedCtor() {
  _cached_size_ = 0;
  point_ = NULL;
  tag_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RallyTarget::~RallyTarget() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RallyTarget)
  SharedDtor();
}

void RallyTarget::SharedDtor() {
  if (this != default_instance_) {
    delete point_;
  }
}

void RallyTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RallyTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RallyTarget_descriptor_;
}

const RallyTarget& RallyTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fraw_2eproto();
  return *default_instance_;
}

RallyTarget* RallyTarget::default_instance_ = NULL;

RallyTarget* RallyTarget::New(::google::protobuf::Arena* arena) const {
  RallyTarget* n = new RallyTarget;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RallyTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RallyTarget)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_point()) {
      if (point_ != NULL) point_->::SC2APIProtocol::Point::Clear();
    }
    tag_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RallyTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RallyTarget)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.Point point = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tag;
        break;
      }

      // optional uint64 tag = 2;
      case 2: {
        if (tag == 16) {
         parse_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RallyTarget)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RallyTarget)
  return false;
#undef DO_
}

void RallyTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RallyTarget)
  // optional .SC2APIProtocol.Point point = 1;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->point_, output);
  }

  // optional uint64 tag = 2;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RallyTarget)
}

::google::protobuf::uint8* RallyTarget::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RallyTarget)
  // optional .SC2APIProtocol.Point point = 1;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->point_, false, target);
  }

  // optional uint64 tag = 2;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RallyTarget)
  return target;
}

int RallyTarget::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RallyTarget)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .SC2APIProtocol.Point point = 1;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->point_);
    }

    // optional uint64 tag = 2;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tag());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RallyTarget::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RallyTarget)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RallyTarget* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RallyTarget>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RallyTarget)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RallyTarget)
    MergeFrom(*source);
  }
}

void RallyTarget::MergeFrom(const RallyTarget& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RallyTarget)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_point()) {
      mutable_point()->::SC2APIProtocol::Point::MergeFrom(from.point());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RallyTarget::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RallyTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RallyTarget::CopyFrom(const RallyTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RallyTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RallyTarget::IsInitialized() const {

  return true;
}

void RallyTarget::Swap(RallyTarget* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RallyTarget::InternalSwap(RallyTarget* other) {
  std::swap(point_, other->point_);
  std::swap(tag_, other->tag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RallyTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RallyTarget_descriptor_;
  metadata.reflection = RallyTarget_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RallyTarget

// optional .SC2APIProtocol.Point point = 1;
bool RallyTarget::has_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RallyTarget::set_has_point() {
  _has_bits_[0] |= 0x00000001u;
}
void RallyTarget::clear_has_point() {
  _has_bits_[0] &= ~0x00000001u;
}
void RallyTarget::clear_point() {
  if (point_ != NULL) point_->::SC2APIProtocol::Point::Clear();
  clear_has_point();
}
const ::SC2APIProtocol::Point& RallyTarget::point() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RallyTarget.point)
  return point_ != NULL ? *point_ : *default_instance_->point_;
}
::SC2APIProtocol::Point* RallyTarget::mutable_point() {
  set_has_point();
  if (point_ == NULL) {
    point_ = new ::SC2APIProtocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RallyTarget.point)
  return point_;
}
::SC2APIProtocol::Point* RallyTarget::release_point() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.RallyTarget.point)
  clear_has_point();
  ::SC2APIProtocol::Point* temp = point_;
  point_ = NULL;
  return temp;
}
void RallyTarget::set_allocated_point(::SC2APIProtocol::Point* point) {
  delete point_;
  point_ = point;
  if (point) {
    set_has_point();
  } else {
    clear_has_point();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.RallyTarget.point)
}

// optional uint64 tag = 2;
bool RallyTarget::has_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RallyTarget::set_has_tag() {
  _has_bits_[0] |= 0x00000002u;
}
void RallyTarget::clear_has_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
void RallyTarget::clear_tag() {
  tag_ = GOOGLE_ULONGLONG(0);
  clear_has_tag();
}
 ::google::protobuf::uint64 RallyTarget::tag() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RallyTarget.tag)
  return tag_;
}
 void RallyTarget::set_tag(::google::protobuf::uint64 value) {
  set_has_tag();
  tag_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RallyTarget.tag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Unit::kDisplayTypeFieldNumber;
const int Unit::kAllianceFieldNumber;
const int Unit::kTagFieldNumber;
const int Unit::kUnitTypeFieldNumber;
const int Unit::kOwnerFieldNumber;
const int Unit::kPosFieldNumber;
const int Unit::kFacingFieldNumber;
const int Unit::kRadiusFieldNumber;
const int Unit::kBuildProgressFieldNumber;
const int Unit::kCloakFieldNumber;
const int Unit::kBuffIdsFieldNumber;
const int Unit::kDetectRangeFieldNumber;
const int Unit::kRadarRangeFieldNumber;
const int Unit::kIsSelectedFieldNumber;
const int Unit::kIsOnScreenFieldNumber;
const int Unit::kIsBlipFieldNumber;
const int Unit::kIsPoweredFieldNumber;
const int Unit::kIsActiveFieldNumber;
const int Unit::kAttackUpgradeLevelFieldNumber;
const int Unit::kArmorUpgradeLevelFieldNumber;
const int Unit::kShieldUpgradeLevelFieldNumber;
const int Unit::kHealthFieldNumber;
const int Unit::kHealthMaxFieldNumber;
const int Unit::kShieldFieldNumber;
const int Unit::kShieldMaxFieldNumber;
const int Unit::kEnergyFieldNumber;
const int Unit::kEnergyMaxFieldNumber;
const int Unit::kMineralContentsFieldNumber;
const int Unit::kVespeneContentsFieldNumber;
const int Unit::kIsFlyingFieldNumber;
const int Unit::kIsBurrowedFieldNumber;
const int Unit::kIsHallucinationFieldNumber;
const int Unit::kOrdersFieldNumber;
const int Unit::kAddOnTagFieldNumber;
const int Unit::kPassengersFieldNumber;
const int Unit::kCargoSpaceTakenFieldNumber;
const int Unit::kCargoSpaceMaxFieldNumber;
const int Unit::kAssignedHarvestersFieldNumber;
const int Unit::kIdealHarvestersFieldNumber;
const int Unit::kWeaponCooldownFieldNumber;
const int Unit::kEngagedTargetTagFieldNumber;
const int Unit::kBuffDurationRemainFieldNumber;
const int Unit::kBuffDurationMaxFieldNumber;
const int Unit::kRallyTargetsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Unit::Unit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.Unit)
}

void Unit::InitAsDefaultInstance() {
  pos_ = const_cast< ::SC2APIProtocol::Point*>(&::SC2APIProtocol::Point::default_instance());
}

Unit::Unit(const Unit& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.Unit)
}

void Unit::SharedCtor() {
  _cached_size_ = 0;
  display_type_ = 1;
  alliance_ = 1;
  tag_ = GOOGLE_ULONGLONG(0);
  unit_type_ = 0u;
  owner_ = 0;
  pos_ = NULL;
  facing_ = 0;
  radius_ = 0;
  build_progress_ = 0;
  cloak_ = 0;
  detect_range_ = 0;
  radar_range_ = 0;
  is_selected_ = false;
  is_on_screen_ = false;
  is_blip_ = false;
  is_powered_ = false;
  is_active_ = false;
  attack_upgrade_level_ = 0;
  armor_upgrade_level_ = 0;
  shield_upgrade_level_ = 0;
  health_ = 0;
  health_max_ = 0;
  shield_ = 0;
  shield_max_ = 0;
  energy_ = 0;
  energy_max_ = 0;
  mineral_contents_ = 0;
  vespene_contents_ = 0;
  is_flying_ = false;
  is_burrowed_ = false;
  is_hallucination_ = false;
  add_on_tag_ = GOOGLE_ULONGLONG(0);
  cargo_space_taken_ = 0;
  cargo_space_max_ = 0;
  assigned_harvesters_ = 0;
  ideal_harvesters_ = 0;
  weapon_cooldown_ = 0;
  engaged_target_tag_ = GOOGLE_ULONGLONG(0);
  buff_duration_remain_ = 0;
  buff_duration_max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Unit::~Unit() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.Unit)
  SharedDtor();
}

void Unit::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void Unit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Unit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Unit_descriptor_;
}

const Unit& Unit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fraw_2eproto();
  return *default_instance_;
}

Unit* Unit::default_instance_ = NULL;

Unit* Unit::New(::google::protobuf::Arena* arena) const {
  Unit* n = new Unit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Unit::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.Unit)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Unit, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Unit*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(tag_, owner_);
    ZR_(facing_, radius_);
    display_type_ = 1;
    alliance_ = 1;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::SC2APIProtocol::Point::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 64256u) {
    ZR_(build_progress_, cloak_);
    ZR_(detect_range_, is_blip_);
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(is_powered_, shield_);
    is_active_ = false;
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ZR_(shield_max_, energy_max_);
    ZR_(is_flying_, vespene_contents_);
  }
  if (_has_bits_[32 / 32] & 250u) {
    ZR_(cargo_space_max_, weapon_cooldown_);
    add_on_tag_ = GOOGLE_ULONGLONG(0);
    cargo_space_taken_ = 0;
  }
  ZR_(engaged_target_tag_, buff_duration_max_);

#undef ZR_HELPER_
#undef ZR_

  buff_ids_.Clear();
  orders_.Clear();
  passengers_.Clear();
  rally_targets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Unit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.Unit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.DisplayType display_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::DisplayType_IsValid(value)) {
            set_display_type(static_cast< ::SC2APIProtocol::DisplayType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_alliance;
        break;
      }

      // optional .SC2APIProtocol.Alliance alliance = 2;
      case 2: {
        if (tag == 16) {
         parse_alliance:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::Alliance_IsValid(value)) {
            set_alliance(static_cast< ::SC2APIProtocol::Alliance >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tag;
        break;
      }

      // optional uint64 tag = 3;
      case 3: {
        if (tag == 24) {
         parse_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_unit_type;
        break;
      }

      // optional uint32 unit_type = 4;
      case 4: {
        if (tag == 32) {
         parse_unit_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unit_type_)));
          set_has_unit_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_owner;
        break;
      }

      // optional int32 owner = 5;
      case 5: {
        if (tag == 40) {
         parse_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &owner_)));
          set_has_owner();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_pos;
        break;
      }

      // optional .SC2APIProtocol.Point pos = 6;
      case 6: {
        if (tag == 50) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_facing;
        break;
      }

      // optional float facing = 7;
      case 7: {
        if (tag == 61) {
         parse_facing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &facing_)));
          set_has_facing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_radius;
        break;
      }

      // optional float radius = 8;
      case 8: {
        if (tag == 69) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_build_progress;
        break;
      }

      // optional float build_progress = 9;
      case 9: {
        if (tag == 77) {
         parse_build_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &build_progress_)));
          set_has_build_progress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_cloak;
        break;
      }

      // optional .SC2APIProtocol.CloakState cloak = 10;
      case 10: {
        if (tag == 80) {
         parse_cloak:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::CloakState_IsValid(value)) {
            set_cloak(static_cast< ::SC2APIProtocol::CloakState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_is_selected;
        break;
      }

      // optional bool is_selected = 11;
      case 11: {
        if (tag == 88) {
         parse_is_selected:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_selected_)));
          set_has_is_selected();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_is_on_screen;
        break;
      }

      // optional bool is_on_screen = 12;
      case 12: {
        if (tag == 96) {
         parse_is_on_screen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_on_screen_)));
          set_has_is_on_screen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_is_blip;
        break;
      }

      // optional bool is_blip = 13;
      case 13: {
        if (tag == 104) {
         parse_is_blip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_blip_)));
          set_has_is_blip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_health;
        break;
      }

      // optional float health = 14;
      case 14: {
        if (tag == 117) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_health_max;
        break;
      }

      // optional float health_max = 15;
      case 15: {
        if (tag == 125) {
         parse_health_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &health_max_)));
          set_has_health_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_shield;
        break;
      }

      // optional float shield = 16;
      case 16: {
        if (tag == 133) {
         parse_shield:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shield_)));
          set_has_shield();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_energy;
        break;
      }

      // optional float energy = 17;
      case 17: {
        if (tag == 141) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_mineral_contents;
        break;
      }

      // optional int32 mineral_contents = 18;
      case 18: {
        if (tag == 144) {
         parse_mineral_contents:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mineral_contents_)));
          set_has_mineral_contents();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_vespene_contents;
        break;
      }

      // optional int32 vespene_contents = 19;
      case 19: {
        if (tag == 152) {
         parse_vespene_contents:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vespene_contents_)));
          set_has_vespene_contents();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_is_flying;
        break;
      }

      // optional bool is_flying = 20;
      case 20: {
        if (tag == 160) {
         parse_is_flying:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_flying_)));
          set_has_is_flying();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_is_burrowed;
        break;
      }

      // optional bool is_burrowed = 21;
      case 21: {
        if (tag == 168) {
         parse_is_burrowed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_burrowed_)));
          set_has_is_burrowed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_orders;
        break;
      }

      // repeated .SC2APIProtocol.UnitOrder orders = 22;
      case 22: {
        if (tag == 178) {
         parse_orders:
          DO_(input->IncrementRecursionDepth());
         parse_loop_orders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_orders()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_loop_orders;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(184)) goto parse_add_on_tag;
        break;
      }

      // optional uint64 add_on_tag = 23;
      case 23: {
        if (tag == 184) {
         parse_add_on_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &add_on_tag_)));
          set_has_add_on_tag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_passengers;
        break;
      }

      // repeated .SC2APIProtocol.PassengerUnit passengers = 24;
      case 24: {
        if (tag == 194) {
         parse_passengers:
          DO_(input->IncrementRecursionDepth());
         parse_loop_passengers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_passengers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_loop_passengers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(200)) goto parse_cargo_space_taken;
        break;
      }

      // optional int32 cargo_space_taken = 25;
      case 25: {
        if (tag == 200) {
         parse_cargo_space_taken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cargo_space_taken_)));
          set_has_cargo_space_taken();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_cargo_space_max;
        break;
      }

      // optional int32 cargo_space_max = 26;
      case 26: {
        if (tag == 208) {
         parse_cargo_space_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cargo_space_max_)));
          set_has_cargo_space_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_buff_ids;
        break;
      }

      // repeated uint32 buff_ids = 27;
      case 27: {
        if (tag == 216) {
         parse_buff_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 216, input, this->mutable_buff_ids())));
        } else if (tag == 218) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_buff_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_buff_ids;
        if (input->ExpectTag(224)) goto parse_assigned_harvesters;
        break;
      }

      // optional int32 assigned_harvesters = 28;
      case 28: {
        if (tag == 224) {
         parse_assigned_harvesters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assigned_harvesters_)));
          set_has_assigned_harvesters();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_ideal_harvesters;
        break;
      }

      // optional int32 ideal_harvesters = 29;
      case 29: {
        if (tag == 232) {
         parse_ideal_harvesters:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ideal_harvesters_)));
          set_has_ideal_harvesters();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(245)) goto parse_weapon_cooldown;
        break;
      }

      // optional float weapon_cooldown = 30;
      case 30: {
        if (tag == 245) {
         parse_weapon_cooldown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weapon_cooldown_)));
          set_has_weapon_cooldown();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(253)) goto parse_detect_range;
        break;
      }

      // optional float detect_range = 31;
      case 31: {
        if (tag == 253) {
         parse_detect_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &detect_range_)));
          set_has_detect_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(261)) goto parse_radar_range;
        break;
      }

      // optional float radar_range = 32;
      case 32: {
        if (tag == 261) {
         parse_radar_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radar_range_)));
          set_has_radar_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(272)) goto parse_engaged_target_tag;
        break;
      }

      // optional uint64 engaged_target_tag = 34;
      case 34: {
        if (tag == 272) {
         parse_engaged_target_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &engaged_target_tag_)));
          set_has_engaged_target_tag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_is_powered;
        break;
      }

      // optional bool is_powered = 35;
      case 35: {
        if (tag == 280) {
         parse_is_powered:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_powered_)));
          set_has_is_powered();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(293)) goto parse_shield_max;
        break;
      }

      // optional float shield_max = 36;
      case 36: {
        if (tag == 293) {
         parse_shield_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shield_max_)));
          set_has_shield_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(301)) goto parse_energy_max;
        break;
      }

      // optional float energy_max = 37;
      case 37: {
        if (tag == 301) {
         parse_energy_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energy_max_)));
          set_has_energy_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(304)) goto parse_is_hallucination;
        break;
      }

      // optional bool is_hallucination = 38;
      case 38: {
        if (tag == 304) {
         parse_is_hallucination:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hallucination_)));
          set_has_is_hallucination();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(312)) goto parse_is_active;
        break;
      }

      // optional bool is_active = 39;
      case 39: {
        if (tag == 312) {
         parse_is_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_active_)));
          set_has_is_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_attack_upgrade_level;
        break;
      }

      // optional int32 attack_upgrade_level = 40;
      case 40: {
        if (tag == 320) {
         parse_attack_upgrade_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_upgrade_level_)));
          set_has_attack_upgrade_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(328)) goto parse_armor_upgrade_level;
        break;
      }

      // optional int32 armor_upgrade_level = 41;
      case 41: {
        if (tag == 328) {
         parse_armor_upgrade_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armor_upgrade_level_)));
          set_has_armor_upgrade_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(336)) goto parse_shield_upgrade_level;
        break;
      }

      // optional int32 shield_upgrade_level = 42;
      case 42: {
        if (tag == 336) {
         parse_shield_upgrade_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shield_upgrade_level_)));
          set_has_shield_upgrade_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(344)) goto parse_buff_duration_remain;
        break;
      }

      // optional int32 buff_duration_remain = 43;
      case 43: {
        if (tag == 344) {
         parse_buff_duration_remain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_duration_remain_)));
          set_has_buff_duration_remain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(352)) goto parse_buff_duration_max;
        break;
      }

      // optional int32 buff_duration_max = 44;
      case 44: {
        if (tag == 352) {
         parse_buff_duration_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buff_duration_max_)));
          set_has_buff_duration_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(362)) goto parse_rally_targets;
        break;
      }

      // repeated .SC2APIProtocol.RallyTarget rally_targets = 45;
      case 45: {
        if (tag == 362) {
         parse_rally_targets:
          DO_(input->IncrementRecursionDepth());
         parse_loop_rally_targets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_rally_targets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(362)) goto parse_loop_rally_targets;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.Unit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.Unit)
  return false;
#undef DO_
}

void Unit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.Unit)
  // optional .SC2APIProtocol.DisplayType display_type = 1;
  if (has_display_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->display_type(), output);
  }

  // optional .SC2APIProtocol.Alliance alliance = 2;
  if (has_alliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->alliance(), output);
  }

  // optional uint64 tag = 3;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->tag(), output);
  }

  // optional uint32 unit_type = 4;
  if (has_unit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->unit_type(), output);
  }

  // optional int32 owner = 5;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->owner(), output);
  }

  // optional .SC2APIProtocol.Point pos = 6;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->pos_, output);
  }

  // optional float facing = 7;
  if (has_facing()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->facing(), output);
  }

  // optional float radius = 8;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->radius(), output);
  }

  // optional float build_progress = 9;
  if (has_build_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->build_progress(), output);
  }

  // optional .SC2APIProtocol.CloakState cloak = 10;
  if (has_cloak()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->cloak(), output);
  }

  // optional bool is_selected = 11;
  if (has_is_selected()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_selected(), output);
  }

  // optional bool is_on_screen = 12;
  if (has_is_on_screen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_on_screen(), output);
  }

  // optional bool is_blip = 13;
  if (has_is_blip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_blip(), output);
  }

  // optional float health = 14;
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->health(), output);
  }

  // optional float health_max = 15;
  if (has_health_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->health_max(), output);
  }

  // optional float shield = 16;
  if (has_shield()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->shield(), output);
  }

  // optional float energy = 17;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->energy(), output);
  }

  // optional int32 mineral_contents = 18;
  if (has_mineral_contents()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->mineral_contents(), output);
  }

  // optional int32 vespene_contents = 19;
  if (has_vespene_contents()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->vespene_contents(), output);
  }

  // optional bool is_flying = 20;
  if (has_is_flying()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->is_flying(), output);
  }

  // optional bool is_burrowed = 21;
  if (has_is_burrowed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->is_burrowed(), output);
  }

  // repeated .SC2APIProtocol.UnitOrder orders = 22;
  for (unsigned int i = 0, n = this->orders_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->orders(i), output);
  }

  // optional uint64 add_on_tag = 23;
  if (has_add_on_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(23, this->add_on_tag(), output);
  }

  // repeated .SC2APIProtocol.PassengerUnit passengers = 24;
  for (unsigned int i = 0, n = this->passengers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->passengers(i), output);
  }

  // optional int32 cargo_space_taken = 25;
  if (has_cargo_space_taken()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->cargo_space_taken(), output);
  }

  // optional int32 cargo_space_max = 26;
  if (has_cargo_space_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->cargo_space_max(), output);
  }

  // repeated uint32 buff_ids = 27;
  for (int i = 0; i < this->buff_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      27, this->buff_ids(i), output);
  }

  // optional int32 assigned_harvesters = 28;
  if (has_assigned_harvesters()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->assigned_harvesters(), output);
  }

  // optional int32 ideal_harvesters = 29;
  if (has_ideal_harvesters()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->ideal_harvesters(), output);
  }

  // optional float weapon_cooldown = 30;
  if (has_weapon_cooldown()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->weapon_cooldown(), output);
  }

  // optional float detect_range = 31;
  if (has_detect_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->detect_range(), output);
  }

  // optional float radar_range = 32;
  if (has_radar_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->radar_range(), output);
  }

  // optional uint64 engaged_target_tag = 34;
  if (has_engaged_target_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(34, this->engaged_target_tag(), output);
  }

  // optional bool is_powered = 35;
  if (has_is_powered()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->is_powered(), output);
  }

  // optional float shield_max = 36;
  if (has_shield_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(36, this->shield_max(), output);
  }

  // optional float energy_max = 37;
  if (has_energy_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(37, this->energy_max(), output);
  }

  // optional bool is_hallucination = 38;
  if (has_is_hallucination()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(38, this->is_hallucination(), output);
  }

  // optional bool is_active = 39;
  if (has_is_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(39, this->is_active(), output);
  }

  // optional int32 attack_upgrade_level = 40;
  if (has_attack_upgrade_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->attack_upgrade_level(), output);
  }

  // optional int32 armor_upgrade_level = 41;
  if (has_armor_upgrade_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->armor_upgrade_level(), output);
  }

  // optional int32 shield_upgrade_level = 42;
  if (has_shield_upgrade_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->shield_upgrade_level(), output);
  }

  // optional int32 buff_duration_remain = 43;
  if (has_buff_duration_remain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->buff_duration_remain(), output);
  }

  // optional int32 buff_duration_max = 44;
  if (has_buff_duration_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->buff_duration_max(), output);
  }

  // repeated .SC2APIProtocol.RallyTarget rally_targets = 45;
  for (unsigned int i = 0, n = this->rally_targets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, this->rally_targets(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.Unit)
}

::google::protobuf::uint8* Unit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.Unit)
  // optional .SC2APIProtocol.DisplayType display_type = 1;
  if (has_display_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->display_type(), target);
  }

  // optional .SC2APIProtocol.Alliance alliance = 2;
  if (has_alliance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->alliance(), target);
  }

  // optional uint64 tag = 3;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->tag(), target);
  }

  // optional uint32 unit_type = 4;
  if (has_unit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->unit_type(), target);
  }

  // optional int32 owner = 5;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->owner(), target);
  }

  // optional .SC2APIProtocol.Point pos = 6;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->pos_, false, target);
  }

  // optional float facing = 7;
  if (has_facing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->facing(), target);
  }

  // optional float radius = 8;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->radius(), target);
  }

  // optional float build_progress = 9;
  if (has_build_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->build_progress(), target);
  }

  // optional .SC2APIProtocol.CloakState cloak = 10;
  if (has_cloak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->cloak(), target);
  }

  // optional bool is_selected = 11;
  if (has_is_selected()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_selected(), target);
  }

  // optional bool is_on_screen = 12;
  if (has_is_on_screen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_on_screen(), target);
  }

  // optional bool is_blip = 13;
  if (has_is_blip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_blip(), target);
  }

  // optional float health = 14;
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->health(), target);
  }

  // optional float health_max = 15;
  if (has_health_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->health_max(), target);
  }

  // optional float shield = 16;
  if (has_shield()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->shield(), target);
  }

  // optional float energy = 17;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->energy(), target);
  }

  // optional int32 mineral_contents = 18;
  if (has_mineral_contents()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->mineral_contents(), target);
  }

  // optional int32 vespene_contents = 19;
  if (has_vespene_contents()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->vespene_contents(), target);
  }

  // optional bool is_flying = 20;
  if (has_is_flying()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->is_flying(), target);
  }

  // optional bool is_burrowed = 21;
  if (has_is_burrowed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->is_burrowed(), target);
  }

  // repeated .SC2APIProtocol.UnitOrder orders = 22;
  for (unsigned int i = 0, n = this->orders_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, this->orders(i), false, target);
  }

  // optional uint64 add_on_tag = 23;
  if (has_add_on_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(23, this->add_on_tag(), target);
  }

  // repeated .SC2APIProtocol.PassengerUnit passengers = 24;
  for (unsigned int i = 0, n = this->passengers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, this->passengers(i), false, target);
  }

  // optional int32 cargo_space_taken = 25;
  if (has_cargo_space_taken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->cargo_space_taken(), target);
  }

  // optional int32 cargo_space_max = 26;
  if (has_cargo_space_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->cargo_space_max(), target);
  }

  // repeated uint32 buff_ids = 27;
  for (int i = 0; i < this->buff_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(27, this->buff_ids(i), target);
  }

  // optional int32 assigned_harvesters = 28;
  if (has_assigned_harvesters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->assigned_harvesters(), target);
  }

  // optional int32 ideal_harvesters = 29;
  if (has_ideal_harvesters()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->ideal_harvesters(), target);
  }

  // optional float weapon_cooldown = 30;
  if (has_weapon_cooldown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->weapon_cooldown(), target);
  }

  // optional float detect_range = 31;
  if (has_detect_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->detect_range(), target);
  }

  // optional float radar_range = 32;
  if (has_radar_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->radar_range(), target);
  }

  // optional uint64 engaged_target_tag = 34;
  if (has_engaged_target_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(34, this->engaged_target_tag(), target);
  }

  // optional bool is_powered = 35;
  if (has_is_powered()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->is_powered(), target);
  }

  // optional float shield_max = 36;
  if (has_shield_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(36, this->shield_max(), target);
  }

  // optional float energy_max = 37;
  if (has_energy_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(37, this->energy_max(), target);
  }

  // optional bool is_hallucination = 38;
  if (has_is_hallucination()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(38, this->is_hallucination(), target);
  }

  // optional bool is_active = 39;
  if (has_is_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(39, this->is_active(), target);
  }

  // optional int32 attack_upgrade_level = 40;
  if (has_attack_upgrade_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->attack_upgrade_level(), target);
  }

  // optional int32 armor_upgrade_level = 41;
  if (has_armor_upgrade_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->armor_upgrade_level(), target);
  }

  // optional int32 shield_upgrade_level = 42;
  if (has_shield_upgrade_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->shield_upgrade_level(), target);
  }

  // optional int32 buff_duration_remain = 43;
  if (has_buff_duration_remain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->buff_duration_remain(), target);
  }

  // optional int32 buff_duration_max = 44;
  if (has_buff_duration_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->buff_duration_max(), target);
  }

  // repeated .SC2APIProtocol.RallyTarget rally_targets = 45;
  for (unsigned int i = 0, n = this->rally_targets_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        45, this->rally_targets(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.Unit)
  return target;
}

int Unit::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.Unit)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .SC2APIProtocol.DisplayType display_type = 1;
    if (has_display_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->display_type());
    }

    // optional .SC2APIProtocol.Alliance alliance = 2;
    if (has_alliance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->alliance());
    }

    // optional uint64 tag = 3;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tag());
    }

    // optional uint32 unit_type = 4;
    if (has_unit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unit_type());
    }

    // optional int32 owner = 5;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->owner());
    }

    // optional .SC2APIProtocol.Point pos = 6;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pos_);
    }

    // optional float facing = 7;
    if (has_facing()) {
      total_size += 1 + 4;
    }

    // optional float radius = 8;
    if (has_radius()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 64256u) {
    // optional float build_progress = 9;
    if (has_build_progress()) {
      total_size += 1 + 4;
    }

    // optional .SC2APIProtocol.CloakState cloak = 10;
    if (has_cloak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cloak());
    }

    // optional float detect_range = 31;
    if (has_detect_range()) {
      total_size += 2 + 4;
    }

    // optional float radar_range = 32;
    if (has_radar_range()) {
      total_size += 2 + 4;
    }

    // optional bool is_selected = 11;
    if (has_is_selected()) {
      total_size += 1 + 1;
    }

    // optional bool is_on_screen = 12;
    if (has_is_on_screen()) {
      total_size += 1 + 1;
    }

    // optional bool is_blip = 13;
    if (has_is_blip()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool is_powered = 35;
    if (has_is_powered()) {
      total_size += 2 + 1;
    }

    // optional bool is_active = 39;
    if (has_is_active()) {
      total_size += 2 + 1;
    }

    // optional int32 attack_upgrade_level = 40;
    if (has_attack_upgrade_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack_upgrade_level());
    }

    // optional int32 armor_upgrade_level = 41;
    if (has_armor_upgrade_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armor_upgrade_level());
    }

    // optional int32 shield_upgrade_level = 42;
    if (has_shield_upgrade_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shield_upgrade_level());
    }

    // optional float health = 14;
    if (has_health()) {
      total_size += 1 + 4;
    }

    // optional float health_max = 15;
    if (has_health_max()) {
      total_size += 1 + 4;
    }

    // optional float shield = 16;
    if (has_shield()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional float shield_max = 36;
    if (has_shield_max()) {
      total_size += 2 + 4;
    }

    // optional float energy = 17;
    if (has_energy()) {
      total_size += 2 + 4;
    }

    // optional float energy_max = 37;
    if (has_energy_max()) {
      total_size += 2 + 4;
    }

    // optional int32 mineral_contents = 18;
    if (has_mineral_contents()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mineral_contents());
    }

    // optional int32 vespene_contents = 19;
    if (has_vespene_contents()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vespene_contents());
    }

    // optional bool is_flying = 20;
    if (has_is_flying()) {
      total_size += 2 + 1;
    }

    // optional bool is_burrowed = 21;
    if (has_is_burrowed()) {
      total_size += 2 + 1;
    }

    // optional bool is_hallucination = 38;
    if (has_is_hallucination()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[33 / 32] & 250u) {
    // optional uint64 add_on_tag = 23;
    if (has_add_on_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->add_on_tag());
    }

    // optional int32 cargo_space_taken = 25;
    if (has_cargo_space_taken()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cargo_space_taken());
    }

    // optional int32 cargo_space_max = 26;
    if (has_cargo_space_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cargo_space_max());
    }

    // optional int32 assigned_harvesters = 28;
    if (has_assigned_harvesters()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->assigned_harvesters());
    }

    // optional int32 ideal_harvesters = 29;
    if (has_ideal_harvesters()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ideal_harvesters());
    }

    // optional float weapon_cooldown = 30;
    if (has_weapon_cooldown()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[40 / 32] & 1792u) {
    // optional uint64 engaged_target_tag = 34;
    if (has_engaged_target_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->engaged_target_tag());
    }

    // optional int32 buff_duration_remain = 43;
    if (has_buff_duration_remain()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_duration_remain());
    }

    // optional int32 buff_duration_max = 44;
    if (has_buff_duration_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buff_duration_max());
    }

  }
  // repeated uint32 buff_ids = 27;
  {
    int data_size = 0;
    for (int i = 0; i < this->buff_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->buff_ids(i));
    }
    total_size += 2 * this->buff_ids_size() + data_size;
  }

  // repeated .SC2APIProtocol.UnitOrder orders = 22;
  total_size += 2 * this->orders_size();
  for (int i = 0; i < this->orders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->orders(i));
  }

  // repeated .SC2APIProtocol.PassengerUnit passengers = 24;
  total_size += 2 * this->passengers_size();
  for (int i = 0; i < this->passengers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->passengers(i));
  }

  // repeated .SC2APIProtocol.RallyTarget rally_targets = 45;
  total_size += 2 * this->rally_targets_size();
  for (int i = 0; i < this->rally_targets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rally_targets(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Unit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.Unit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Unit* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Unit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.Unit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.Unit)
    MergeFrom(*source);
  }
}

void Unit::MergeFrom(const Unit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.Unit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  buff_ids_.MergeFrom(from.buff_ids_);
  orders_.MergeFrom(from.orders_);
  passengers_.MergeFrom(from.passengers_);
  rally_targets_.MergeFrom(from.rally_targets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_display_type()) {
      set_display_type(from.display_type());
    }
    if (from.has_alliance()) {
      set_alliance(from.alliance());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_unit_type()) {
      set_unit_type(from.unit_type());
    }
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_pos()) {
      mutable_pos()->::SC2APIProtocol::Point::MergeFrom(from.pos());
    }
    if (from.has_facing()) {
      set_facing(from.facing());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_build_progress()) {
      set_build_progress(from.build_progress());
    }
    if (from.has_cloak()) {
      set_cloak(from.cloak());
    }
    if (from.has_detect_range()) {
      set_detect_range(from.detect_range());
    }
    if (from.has_radar_range()) {
      set_radar_range(from.radar_range());
    }
    if (from.has_is_selected()) {
      set_is_selected(from.is_selected());
    }
    if (from.has_is_on_screen()) {
      set_is_on_screen(from.is_on_screen());
    }
    if (from.has_is_blip()) {
      set_is_blip(from.is_blip());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_is_powered()) {
      set_is_powered(from.is_powered());
    }
    if (from.has_is_active()) {
      set_is_active(from.is_active());
    }
    if (from.has_attack_upgrade_level()) {
      set_attack_upgrade_level(from.attack_upgrade_level());
    }
    if (from.has_armor_upgrade_level()) {
      set_armor_upgrade_level(from.armor_upgrade_level());
    }
    if (from.has_shield_upgrade_level()) {
      set_shield_upgrade_level(from.shield_upgrade_level());
    }
    if (from.has_health()) {
      set_health(from.health());
    }
    if (from.has_health_max()) {
      set_health_max(from.health_max());
    }
    if (from.has_shield()) {
      set_shield(from.shield());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_shield_max()) {
      set_shield_max(from.shield_max());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_energy_max()) {
      set_energy_max(from.energy_max());
    }
    if (from.has_mineral_contents()) {
      set_mineral_contents(from.mineral_contents());
    }
    if (from.has_vespene_contents()) {
      set_vespene_contents(from.vespene_contents());
    }
    if (from.has_is_flying()) {
      set_is_flying(from.is_flying());
    }
    if (from.has_is_burrowed()) {
      set_is_burrowed(from.is_burrowed());
    }
    if (from.has_is_hallucination()) {
      set_is_hallucination(from.is_hallucination());
    }
  }
  if (from._has_bits_[33 / 32] & (0xffu << (33 % 32))) {
    if (from.has_add_on_tag()) {
      set_add_on_tag(from.add_on_tag());
    }
    if (from.has_cargo_space_taken()) {
      set_cargo_space_taken(from.cargo_space_taken());
    }
    if (from.has_cargo_space_max()) {
      set_cargo_space_max(from.cargo_space_max());
    }
    if (from.has_assigned_harvesters()) {
      set_assigned_harvesters(from.assigned_harvesters());
    }
    if (from.has_ideal_harvesters()) {
      set_ideal_harvesters(from.ideal_harvesters());
    }
    if (from.has_weapon_cooldown()) {
      set_weapon_cooldown(from.weapon_cooldown());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_engaged_target_tag()) {
      set_engaged_target_tag(from.engaged_target_tag());
    }
    if (from.has_buff_duration_remain()) {
      set_buff_duration_remain(from.buff_duration_remain());
    }
    if (from.has_buff_duration_max()) {
      set_buff_duration_max(from.buff_duration_max());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Unit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.Unit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Unit::CopyFrom(const Unit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.Unit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Unit::IsInitialized() const {

  return true;
}

void Unit::Swap(Unit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Unit::InternalSwap(Unit* other) {
  std::swap(display_type_, other->display_type_);
  std::swap(alliance_, other->alliance_);
  std::swap(tag_, other->tag_);
  std::swap(unit_type_, other->unit_type_);
  std::swap(owner_, other->owner_);
  std::swap(pos_, other->pos_);
  std::swap(facing_, other->facing_);
  std::swap(radius_, other->radius_);
  std::swap(build_progress_, other->build_progress_);
  std::swap(cloak_, other->cloak_);
  buff_ids_.UnsafeArenaSwap(&other->buff_ids_);
  std::swap(detect_range_, other->detect_range_);
  std::swap(radar_range_, other->radar_range_);
  std::swap(is_selected_, other->is_selected_);
  std::swap(is_on_screen_, other->is_on_screen_);
  std::swap(is_blip_, other->is_blip_);
  std::swap(is_powered_, other->is_powered_);
  std::swap(is_active_, other->is_active_);
  std::swap(attack_upgrade_level_, other->attack_upgrade_level_);
  std::swap(armor_upgrade_level_, other->armor_upgrade_level_);
  std::swap(shield_upgrade_level_, other->shield_upgrade_level_);
  std::swap(health_, other->health_);
  std::swap(health_max_, other->health_max_);
  std::swap(shield_, other->shield_);
  std::swap(shield_max_, other->shield_max_);
  std::swap(energy_, other->energy_);
  std::swap(energy_max_, other->energy_max_);
  std::swap(mineral_contents_, other->mineral_contents_);
  std::swap(vespene_contents_, other->vespene_contents_);
  std::swap(is_flying_, other->is_flying_);
  std::swap(is_burrowed_, other->is_burrowed_);
  std::swap(is_hallucination_, other->is_hallucination_);
  orders_.UnsafeArenaSwap(&other->orders_);
  std::swap(add_on_tag_, other->add_on_tag_);
  passengers_.UnsafeArenaSwap(&other->passengers_);
  std::swap(cargo_space_taken_, other->cargo_space_taken_);
  std::swap(cargo_space_max_, other->cargo_space_max_);
  std::swap(assigned_harvesters_, other->assigned_harvesters_);
  std::swap(ideal_harvesters_, other->ideal_harvesters_);
  std::swap(weapon_cooldown_, other->weapon_cooldown_);
  std::swap(engaged_target_tag_, other->engaged_target_tag_);
  std::swap(buff_duration_remain_, other->buff_duration_remain_);
  std::swap(buff_duration_max_, other->buff_duration_max_);
  rally_targets_.UnsafeArenaSwap(&other->rally_targets_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Unit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Unit_descriptor_;
  metadata.reflection = Unit_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Unit

// optional .SC2APIProtocol.DisplayType display_type = 1;
bool Unit::has_display_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Unit::set_has_display_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Unit::clear_has_display_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Unit::clear_display_type() {
  display_type_ = 1;
  clear_has_display_type();
}
 ::SC2APIProtocol::DisplayType Unit::display_type() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.display_type)
  return static_cast< ::SC2APIProtocol::DisplayType >(display_type_);
}
 void Unit::set_display_type(::SC2APIProtocol::DisplayType value) {
  assert(::SC2APIProtocol::DisplayType_IsValid(value));
  set_has_display_type();
  display_type_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.display_type)
}

// optional .SC2APIProtocol.Alliance alliance = 2;
bool Unit::has_alliance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Unit::set_has_alliance() {
  _has_bits_[0] |= 0x00000002u;
}
void Unit::clear_has_alliance() {
  _has_bits_[0] &= ~0x00000002u;
}
void Unit::clear_alliance() {
  alliance_ = 1;
  clear_has_alliance();
}
 ::SC2APIProtocol::Alliance Unit::alliance() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.alliance)
  return static_cast< ::SC2APIProtocol::Alliance >(alliance_);
}
 void Unit::set_alliance(::SC2APIProtocol::Alliance value) {
  assert(::SC2APIProtocol::Alliance_IsValid(value));
  set_has_alliance();
  alliance_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.alliance)
}

// optional uint64 tag = 3;
bool Unit::has_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Unit::set_has_tag() {
  _has_bits_[0] |= 0x00000004u;
}
void Unit::clear_has_tag() {
  _has_bits_[0] &= ~0x00000004u;
}
void Unit::clear_tag() {
  tag_ = GOOGLE_ULONGLONG(0);
  clear_has_tag();
}
 ::google::protobuf::uint64 Unit::tag() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.tag)
  return tag_;
}
 void Unit::set_tag(::google::protobuf::uint64 value) {
  set_has_tag();
  tag_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.tag)
}

// optional uint32 unit_type = 4;
bool Unit::has_unit_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Unit::set_has_unit_type() {
  _has_bits_[0] |= 0x00000008u;
}
void Unit::clear_has_unit_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void Unit::clear_unit_type() {
  unit_type_ = 0u;
  clear_has_unit_type();
}
 ::google::protobuf::uint32 Unit::unit_type() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.unit_type)
  return unit_type_;
}
 void Unit::set_unit_type(::google::protobuf::uint32 value) {
  set_has_unit_type();
  unit_type_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.unit_type)
}

// optional int32 owner = 5;
bool Unit::has_owner() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Unit::set_has_owner() {
  _has_bits_[0] |= 0x00000010u;
}
void Unit::clear_has_owner() {
  _has_bits_[0] &= ~0x00000010u;
}
void Unit::clear_owner() {
  owner_ = 0;
  clear_has_owner();
}
 ::google::protobuf::int32 Unit::owner() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.owner)
  return owner_;
}
 void Unit::set_owner(::google::protobuf::int32 value) {
  set_has_owner();
  owner_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.owner)
}

// optional .SC2APIProtocol.Point pos = 6;
bool Unit::has_pos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Unit::set_has_pos() {
  _has_bits_[0] |= 0x00000020u;
}
void Unit::clear_has_pos() {
  _has_bits_[0] &= ~0x00000020u;
}
void Unit::clear_pos() {
  if (pos_ != NULL) pos_->::SC2APIProtocol::Point::Clear();
  clear_has_pos();
}
const ::SC2APIProtocol::Point& Unit::pos() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
::SC2APIProtocol::Point* Unit::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::SC2APIProtocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Unit.pos)
  return pos_;
}
::SC2APIProtocol::Point* Unit::release_pos() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Unit.pos)
  clear_has_pos();
  ::SC2APIProtocol::Point* temp = pos_;
  pos_ = NULL;
  return temp;
}
void Unit::set_allocated_pos(::SC2APIProtocol::Point* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Unit.pos)
}

// optional float facing = 7;
bool Unit::has_facing() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Unit::set_has_facing() {
  _has_bits_[0] |= 0x00000040u;
}
void Unit::clear_has_facing() {
  _has_bits_[0] &= ~0x00000040u;
}
void Unit::clear_facing() {
  facing_ = 0;
  clear_has_facing();
}
 float Unit::facing() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.facing)
  return facing_;
}
 void Unit::set_facing(float value) {
  set_has_facing();
  facing_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.facing)
}

// optional float radius = 8;
bool Unit::has_radius() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Unit::set_has_radius() {
  _has_bits_[0] |= 0x00000080u;
}
void Unit::clear_has_radius() {
  _has_bits_[0] &= ~0x00000080u;
}
void Unit::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
 float Unit::radius() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.radius)
  return radius_;
}
 void Unit::set_radius(float value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.radius)
}

// optional float build_progress = 9;
bool Unit::has_build_progress() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Unit::set_has_build_progress() {
  _has_bits_[0] |= 0x00000100u;
}
void Unit::clear_has_build_progress() {
  _has_bits_[0] &= ~0x00000100u;
}
void Unit::clear_build_progress() {
  build_progress_ = 0;
  clear_has_build_progress();
}
 float Unit::build_progress() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.build_progress)
  return build_progress_;
}
 void Unit::set_build_progress(float value) {
  set_has_build_progress();
  build_progress_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.build_progress)
}

// optional .SC2APIProtocol.CloakState cloak = 10;
bool Unit::has_cloak() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Unit::set_has_cloak() {
  _has_bits_[0] |= 0x00000200u;
}
void Unit::clear_has_cloak() {
  _has_bits_[0] &= ~0x00000200u;
}
void Unit::clear_cloak() {
  cloak_ = 0;
  clear_has_cloak();
}
 ::SC2APIProtocol::CloakState Unit::cloak() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.cloak)
  return static_cast< ::SC2APIProtocol::CloakState >(cloak_);
}
 void Unit::set_cloak(::SC2APIProtocol::CloakState value) {
  assert(::SC2APIProtocol::CloakState_IsValid(value));
  set_has_cloak();
  cloak_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.cloak)
}

// repeated uint32 buff_ids = 27;
int Unit::buff_ids_size() const {
  return buff_ids_.size();
}
void Unit::clear_buff_ids() {
  buff_ids_.Clear();
}
 ::google::protobuf::uint32 Unit::buff_ids(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.buff_ids)
  return buff_ids_.Get(index);
}
 void Unit::set_buff_ids(int index, ::google::protobuf::uint32 value) {
  buff_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.buff_ids)
}
 void Unit::add_buff_ids(::google::protobuf::uint32 value) {
  buff_ids_.Add(value);
  // @@protoc_insertion_point(field_add:SC2APIProtocol.Unit.buff_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Unit::buff_ids() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.Unit.buff_ids)
  return buff_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Unit::mutable_buff_ids() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.Unit.buff_ids)
  return &buff_ids_;
}

// optional float detect_range = 31;
bool Unit::has_detect_range() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Unit::set_has_detect_range() {
  _has_bits_[0] |= 0x00000800u;
}
void Unit::clear_has_detect_range() {
  _has_bits_[0] &= ~0x00000800u;
}
void Unit::clear_detect_range() {
  detect_range_ = 0;
  clear_has_detect_range();
}
 float Unit::detect_range() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.detect_range)
  return detect_range_;
}
 void Unit::set_detect_range(float value) {
  set_has_detect_range();
  detect_range_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.detect_range)
}

// optional float radar_range = 32;
bool Unit::has_radar_range() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Unit::set_has_radar_range() {
  _has_bits_[0] |= 0x00001000u;
}
void Unit::clear_has_radar_range() {
  _has_bits_[0] &= ~0x00001000u;
}
void Unit::clear_radar_range() {
  radar_range_ = 0;
  clear_has_radar_range();
}
 float Unit::radar_range() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.radar_range)
  return radar_range_;
}
 void Unit::set_radar_range(float value) {
  set_has_radar_range();
  radar_range_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.radar_range)
}

// optional bool is_selected = 11;
bool Unit::has_is_selected() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Unit::set_has_is_selected() {
  _has_bits_[0] |= 0x00002000u;
}
void Unit::clear_has_is_selected() {
  _has_bits_[0] &= ~0x00002000u;
}
void Unit::clear_is_selected() {
  is_selected_ = false;
  clear_has_is_selected();
}
 bool Unit::is_selected() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.is_selected)
  return is_selected_;
}
 void Unit::set_is_selected(bool value) {
  set_has_is_selected();
  is_selected_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.is_selected)
}

// optional bool is_on_screen = 12;
bool Unit::has_is_on_screen() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Unit::set_has_is_on_screen() {
  _has_bits_[0] |= 0x00004000u;
}
void Unit::clear_has_is_on_screen() {
  _has_bits_[0] &= ~0x00004000u;
}
void Unit::clear_is_on_screen() {
  is_on_screen_ = false;
  clear_has_is_on_screen();
}
 bool Unit::is_on_screen() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.is_on_screen)
  return is_on_screen_;
}
 void Unit::set_is_on_screen(bool value) {
  set_has_is_on_screen();
  is_on_screen_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.is_on_screen)
}

// optional bool is_blip = 13;
bool Unit::has_is_blip() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Unit::set_has_is_blip() {
  _has_bits_[0] |= 0x00008000u;
}
void Unit::clear_has_is_blip() {
  _has_bits_[0] &= ~0x00008000u;
}
void Unit::clear_is_blip() {
  is_blip_ = false;
  clear_has_is_blip();
}
 bool Unit::is_blip() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.is_blip)
  return is_blip_;
}
 void Unit::set_is_blip(bool value) {
  set_has_is_blip();
  is_blip_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.is_blip)
}

// optional bool is_powered = 35;
bool Unit::has_is_powered() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Unit::set_has_is_powered() {
  _has_bits_[0] |= 0x00010000u;
}
void Unit::clear_has_is_powered() {
  _has_bits_[0] &= ~0x00010000u;
}
void Unit::clear_is_powered() {
  is_powered_ = false;
  clear_has_is_powered();
}
 bool Unit::is_powered() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.is_powered)
  return is_powered_;
}
 void Unit::set_is_powered(bool value) {
  set_has_is_powered();
  is_powered_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.is_powered)
}

// optional bool is_active = 39;
bool Unit::has_is_active() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Unit::set_has_is_active() {
  _has_bits_[0] |= 0x00020000u;
}
void Unit::clear_has_is_active() {
  _has_bits_[0] &= ~0x00020000u;
}
void Unit::clear_is_active() {
  is_active_ = false;
  clear_has_is_active();
}
 bool Unit::is_active() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.is_active)
  return is_active_;
}
 void Unit::set_is_active(bool value) {
  set_has_is_active();
  is_active_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.is_active)
}

// optional int32 attack_upgrade_level = 40;
bool Unit::has_attack_upgrade_level() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Unit::set_has_attack_upgrade_level() {
  _has_bits_[0] |= 0x00040000u;
}
void Unit::clear_has_attack_upgrade_level() {
  _has_bits_[0] &= ~0x00040000u;
}
void Unit::clear_attack_upgrade_level() {
  attack_upgrade_level_ = 0;
  clear_has_attack_upgrade_level();
}
 ::google::protobuf::int32 Unit::attack_upgrade_level() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.attack_upgrade_level)
  return attack_upgrade_level_;
}
 void Unit::set_attack_upgrade_level(::google::protobuf::int32 value) {
  set_has_attack_upgrade_level();
  attack_upgrade_level_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.attack_upgrade_level)
}

// optional int32 armor_upgrade_level = 41;
bool Unit::has_armor_upgrade_level() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Unit::set_has_armor_upgrade_level() {
  _has_bits_[0] |= 0x00080000u;
}
void Unit::clear_has_armor_upgrade_level() {
  _has_bits_[0] &= ~0x00080000u;
}
void Unit::clear_armor_upgrade_level() {
  armor_upgrade_level_ = 0;
  clear_has_armor_upgrade_level();
}
 ::google::protobuf::int32 Unit::armor_upgrade_level() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.armor_upgrade_level)
  return armor_upgrade_level_;
}
 void Unit::set_armor_upgrade_level(::google::protobuf::int32 value) {
  set_has_armor_upgrade_level();
  armor_upgrade_level_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.armor_upgrade_level)
}

// optional int32 shield_upgrade_level = 42;
bool Unit::has_shield_upgrade_level() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Unit::set_has_shield_upgrade_level() {
  _has_bits_[0] |= 0x00100000u;
}
void Unit::clear_has_shield_upgrade_level() {
  _has_bits_[0] &= ~0x00100000u;
}
void Unit::clear_shield_upgrade_level() {
  shield_upgrade_level_ = 0;
  clear_has_shield_upgrade_level();
}
 ::google::protobuf::int32 Unit::shield_upgrade_level() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.shield_upgrade_level)
  return shield_upgrade_level_;
}
 void Unit::set_shield_upgrade_level(::google::protobuf::int32 value) {
  set_has_shield_upgrade_level();
  shield_upgrade_level_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.shield_upgrade_level)
}

// optional float health = 14;
bool Unit::has_health() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Unit::set_has_health() {
  _has_bits_[0] |= 0x00200000u;
}
void Unit::clear_has_health() {
  _has_bits_[0] &= ~0x00200000u;
}
void Unit::clear_health() {
  health_ = 0;
  clear_has_health();
}
 float Unit::health() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.health)
  return health_;
}
 void Unit::set_health(float value) {
  set_has_health();
  health_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.health)
}

// optional float health_max = 15;
bool Unit::has_health_max() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void Unit::set_has_health_max() {
  _has_bits_[0] |= 0x00400000u;
}
void Unit::clear_has_health_max() {
  _has_bits_[0] &= ~0x00400000u;
}
void Unit::clear_health_max() {
  health_max_ = 0;
  clear_has_health_max();
}
 float Unit::health_max() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.health_max)
  return health_max_;
}
 void Unit::set_health_max(float value) {
  set_has_health_max();
  health_max_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.health_max)
}

// optional float shield = 16;
bool Unit::has_shield() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void Unit::set_has_shield() {
  _has_bits_[0] |= 0x00800000u;
}
void Unit::clear_has_shield() {
  _has_bits_[0] &= ~0x00800000u;
}
void Unit::clear_shield() {
  shield_ = 0;
  clear_has_shield();
}
 float Unit::shield() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.shield)
  return shield_;
}
 void Unit::set_shield(float value) {
  set_has_shield();
  shield_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.shield)
}

// optional float shield_max = 36;
bool Unit::has_shield_max() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void Unit::set_has_shield_max() {
  _has_bits_[0] |= 0x01000000u;
}
void Unit::clear_has_shield_max() {
  _has_bits_[0] &= ~0x01000000u;
}
void Unit::clear_shield_max() {
  shield_max_ = 0;
  clear_has_shield_max();
}
 float Unit::shield_max() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.shield_max)
  return shield_max_;
}
 void Unit::set_shield_max(float value) {
  set_has_shield_max();
  shield_max_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.shield_max)
}

// optional float energy = 17;
bool Unit::has_energy() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void Unit::set_has_energy() {
  _has_bits_[0] |= 0x02000000u;
}
void Unit::clear_has_energy() {
  _has_bits_[0] &= ~0x02000000u;
}
void Unit::clear_energy() {
  energy_ = 0;
  clear_has_energy();
}
 float Unit::energy() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.energy)
  return energy_;
}
 void Unit::set_energy(float value) {
  set_has_energy();
  energy_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.energy)
}

// optional float energy_max = 37;
bool Unit::has_energy_max() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void Unit::set_has_energy_max() {
  _has_bits_[0] |= 0x04000000u;
}
void Unit::clear_has_energy_max() {
  _has_bits_[0] &= ~0x04000000u;
}
void Unit::clear_energy_max() {
  energy_max_ = 0;
  clear_has_energy_max();
}
 float Unit::energy_max() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.energy_max)
  return energy_max_;
}
 void Unit::set_energy_max(float value) {
  set_has_energy_max();
  energy_max_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.energy_max)
}

// optional int32 mineral_contents = 18;
bool Unit::has_mineral_contents() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void Unit::set_has_mineral_contents() {
  _has_bits_[0] |= 0x08000000u;
}
void Unit::clear_has_mineral_contents() {
  _has_bits_[0] &= ~0x08000000u;
}
void Unit::clear_mineral_contents() {
  mineral_contents_ = 0;
  clear_has_mineral_contents();
}
 ::google::protobuf::int32 Unit::mineral_contents() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.mineral_contents)
  return mineral_contents_;
}
 void Unit::set_mineral_contents(::google::protobuf::int32 value) {
  set_has_mineral_contents();
  mineral_contents_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.mineral_contents)
}

// optional int32 vespene_contents = 19;
bool Unit::has_vespene_contents() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void Unit::set_has_vespene_contents() {
  _has_bits_[0] |= 0x10000000u;
}
void Unit::clear_has_vespene_contents() {
  _has_bits_[0] &= ~0x10000000u;
}
void Unit::clear_vespene_contents() {
  vespene_contents_ = 0;
  clear_has_vespene_contents();
}
 ::google::protobuf::int32 Unit::vespene_contents() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.vespene_contents)
  return vespene_contents_;
}
 void Unit::set_vespene_contents(::google::protobuf::int32 value) {
  set_has_vespene_contents();
  vespene_contents_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.vespene_contents)
}

// optional bool is_flying = 20;
bool Unit::has_is_flying() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void Unit::set_has_is_flying() {
  _has_bits_[0] |= 0x20000000u;
}
void Unit::clear_has_is_flying() {
  _has_bits_[0] &= ~0x20000000u;
}
void Unit::clear_is_flying() {
  is_flying_ = false;
  clear_has_is_flying();
}
 bool Unit::is_flying() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.is_flying)
  return is_flying_;
}
 void Unit::set_is_flying(bool value) {
  set_has_is_flying();
  is_flying_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.is_flying)
}

// optional bool is_burrowed = 21;
bool Unit::has_is_burrowed() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void Unit::set_has_is_burrowed() {
  _has_bits_[0] |= 0x40000000u;
}
void Unit::clear_has_is_burrowed() {
  _has_bits_[0] &= ~0x40000000u;
}
void Unit::clear_is_burrowed() {
  is_burrowed_ = false;
  clear_has_is_burrowed();
}
 bool Unit::is_burrowed() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.is_burrowed)
  return is_burrowed_;
}
 void Unit::set_is_burrowed(bool value) {
  set_has_is_burrowed();
  is_burrowed_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.is_burrowed)
}

// optional bool is_hallucination = 38;
bool Unit::has_is_hallucination() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void Unit::set_has_is_hallucination() {
  _has_bits_[0] |= 0x80000000u;
}
void Unit::clear_has_is_hallucination() {
  _has_bits_[0] &= ~0x80000000u;
}
void Unit::clear_is_hallucination() {
  is_hallucination_ = false;
  clear_has_is_hallucination();
}
 bool Unit::is_hallucination() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.is_hallucination)
  return is_hallucination_;
}
 void Unit::set_is_hallucination(bool value) {
  set_has_is_hallucination();
  is_hallucination_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.is_hallucination)
}

// repeated .SC2APIProtocol.UnitOrder orders = 22;
int Unit::orders_size() const {
  return orders_.size();
}
void Unit::clear_orders() {
  orders_.Clear();
}
const ::SC2APIProtocol::UnitOrder& Unit::orders(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.orders)
  return orders_.Get(index);
}
::SC2APIProtocol::UnitOrder* Unit::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Unit.orders)
  return orders_.Mutable(index);
}
::SC2APIProtocol::UnitOrder* Unit::add_orders() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.Unit.orders)
  return orders_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::UnitOrder >*
Unit::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.Unit.orders)
  return &orders_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::UnitOrder >&
Unit::orders() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.Unit.orders)
  return orders_;
}

// optional uint64 add_on_tag = 23;
bool Unit::has_add_on_tag() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void Unit::set_has_add_on_tag() {
  _has_bits_[1] |= 0x00000002u;
}
void Unit::clear_has_add_on_tag() {
  _has_bits_[1] &= ~0x00000002u;
}
void Unit::clear_add_on_tag() {
  add_on_tag_ = GOOGLE_ULONGLONG(0);
  clear_has_add_on_tag();
}
 ::google::protobuf::uint64 Unit::add_on_tag() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.add_on_tag)
  return add_on_tag_;
}
 void Unit::set_add_on_tag(::google::protobuf::uint64 value) {
  set_has_add_on_tag();
  add_on_tag_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.add_on_tag)
}

// repeated .SC2APIProtocol.PassengerUnit passengers = 24;
int Unit::passengers_size() const {
  return passengers_.size();
}
void Unit::clear_passengers() {
  passengers_.Clear();
}
const ::SC2APIProtocol::PassengerUnit& Unit::passengers(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.passengers)
  return passengers_.Get(index);
}
::SC2APIProtocol::PassengerUnit* Unit::mutable_passengers(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Unit.passengers)
  return passengers_.Mutable(index);
}
::SC2APIProtocol::PassengerUnit* Unit::add_passengers() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.Unit.passengers)
  return passengers_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::PassengerUnit >*
Unit::mutable_passengers() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.Unit.passengers)
  return &passengers_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::PassengerUnit >&
Unit::passengers() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.Unit.passengers)
  return passengers_;
}

// optional int32 cargo_space_taken = 25;
bool Unit::has_cargo_space_taken() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void Unit::set_has_cargo_space_taken() {
  _has_bits_[1] |= 0x00000008u;
}
void Unit::clear_has_cargo_space_taken() {
  _has_bits_[1] &= ~0x00000008u;
}
void Unit::clear_cargo_space_taken() {
  cargo_space_taken_ = 0;
  clear_has_cargo_space_taken();
}
 ::google::protobuf::int32 Unit::cargo_space_taken() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.cargo_space_taken)
  return cargo_space_taken_;
}
 void Unit::set_cargo_space_taken(::google::protobuf::int32 value) {
  set_has_cargo_space_taken();
  cargo_space_taken_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.cargo_space_taken)
}

// optional int32 cargo_space_max = 26;
bool Unit::has_cargo_space_max() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void Unit::set_has_cargo_space_max() {
  _has_bits_[1] |= 0x00000010u;
}
void Unit::clear_has_cargo_space_max() {
  _has_bits_[1] &= ~0x00000010u;
}
void Unit::clear_cargo_space_max() {
  cargo_space_max_ = 0;
  clear_has_cargo_space_max();
}
 ::google::protobuf::int32 Unit::cargo_space_max() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.cargo_space_max)
  return cargo_space_max_;
}
 void Unit::set_cargo_space_max(::google::protobuf::int32 value) {
  set_has_cargo_space_max();
  cargo_space_max_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.cargo_space_max)
}

// optional int32 assigned_harvesters = 28;
bool Unit::has_assigned_harvesters() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void Unit::set_has_assigned_harvesters() {
  _has_bits_[1] |= 0x00000020u;
}
void Unit::clear_has_assigned_harvesters() {
  _has_bits_[1] &= ~0x00000020u;
}
void Unit::clear_assigned_harvesters() {
  assigned_harvesters_ = 0;
  clear_has_assigned_harvesters();
}
 ::google::protobuf::int32 Unit::assigned_harvesters() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.assigned_harvesters)
  return assigned_harvesters_;
}
 void Unit::set_assigned_harvesters(::google::protobuf::int32 value) {
  set_has_assigned_harvesters();
  assigned_harvesters_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.assigned_harvesters)
}

// optional int32 ideal_harvesters = 29;
bool Unit::has_ideal_harvesters() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void Unit::set_has_ideal_harvesters() {
  _has_bits_[1] |= 0x00000040u;
}
void Unit::clear_has_ideal_harvesters() {
  _has_bits_[1] &= ~0x00000040u;
}
void Unit::clear_ideal_harvesters() {
  ideal_harvesters_ = 0;
  clear_has_ideal_harvesters();
}
 ::google::protobuf::int32 Unit::ideal_harvesters() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.ideal_harvesters)
  return ideal_harvesters_;
}
 void Unit::set_ideal_harvesters(::google::protobuf::int32 value) {
  set_has_ideal_harvesters();
  ideal_harvesters_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.ideal_harvesters)
}

// optional float weapon_cooldown = 30;
bool Unit::has_weapon_cooldown() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void Unit::set_has_weapon_cooldown() {
  _has_bits_[1] |= 0x00000080u;
}
void Unit::clear_has_weapon_cooldown() {
  _has_bits_[1] &= ~0x00000080u;
}
void Unit::clear_weapon_cooldown() {
  weapon_cooldown_ = 0;
  clear_has_weapon_cooldown();
}
 float Unit::weapon_cooldown() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.weapon_cooldown)
  return weapon_cooldown_;
}
 void Unit::set_weapon_cooldown(float value) {
  set_has_weapon_cooldown();
  weapon_cooldown_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.weapon_cooldown)
}

// optional uint64 engaged_target_tag = 34;
bool Unit::has_engaged_target_tag() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void Unit::set_has_engaged_target_tag() {
  _has_bits_[1] |= 0x00000100u;
}
void Unit::clear_has_engaged_target_tag() {
  _has_bits_[1] &= ~0x00000100u;
}
void Unit::clear_engaged_target_tag() {
  engaged_target_tag_ = GOOGLE_ULONGLONG(0);
  clear_has_engaged_target_tag();
}
 ::google::protobuf::uint64 Unit::engaged_target_tag() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.engaged_target_tag)
  return engaged_target_tag_;
}
 void Unit::set_engaged_target_tag(::google::protobuf::uint64 value) {
  set_has_engaged_target_tag();
  engaged_target_tag_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.engaged_target_tag)
}

// optional int32 buff_duration_remain = 43;
bool Unit::has_buff_duration_remain() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void Unit::set_has_buff_duration_remain() {
  _has_bits_[1] |= 0x00000200u;
}
void Unit::clear_has_buff_duration_remain() {
  _has_bits_[1] &= ~0x00000200u;
}
void Unit::clear_buff_duration_remain() {
  buff_duration_remain_ = 0;
  clear_has_buff_duration_remain();
}
 ::google::protobuf::int32 Unit::buff_duration_remain() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.buff_duration_remain)
  return buff_duration_remain_;
}
 void Unit::set_buff_duration_remain(::google::protobuf::int32 value) {
  set_has_buff_duration_remain();
  buff_duration_remain_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.buff_duration_remain)
}

// optional int32 buff_duration_max = 44;
bool Unit::has_buff_duration_max() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void Unit::set_has_buff_duration_max() {
  _has_bits_[1] |= 0x00000400u;
}
void Unit::clear_has_buff_duration_max() {
  _has_bits_[1] &= ~0x00000400u;
}
void Unit::clear_buff_duration_max() {
  buff_duration_max_ = 0;
  clear_has_buff_duration_max();
}
 ::google::protobuf::int32 Unit::buff_duration_max() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.buff_duration_max)
  return buff_duration_max_;
}
 void Unit::set_buff_duration_max(::google::protobuf::int32 value) {
  set_has_buff_duration_max();
  buff_duration_max_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Unit.buff_duration_max)
}

// repeated .SC2APIProtocol.RallyTarget rally_targets = 45;
int Unit::rally_targets_size() const {
  return rally_targets_.size();
}
void Unit::clear_rally_targets() {
  rally_targets_.Clear();
}
const ::SC2APIProtocol::RallyTarget& Unit::rally_targets(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Unit.rally_targets)
  return rally_targets_.Get(index);
}
::SC2APIProtocol::RallyTarget* Unit::mutable_rally_targets(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Unit.rally_targets)
  return rally_targets_.Mutable(index);
}
::SC2APIProtocol::RallyTarget* Unit::add_rally_targets() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.Unit.rally_targets)
  return rally_targets_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::RallyTarget >*
Unit::mutable_rally_targets() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.Unit.rally_targets)
  return &rally_targets_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::RallyTarget >&
Unit::rally_targets() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.Unit.rally_targets)
  return rally_targets_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapState::kVisibilityFieldNumber;
const int MapState::kCreepFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapState::MapState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.MapState)
}

void MapState::InitAsDefaultInstance() {
  visibility_ = const_cast< ::SC2APIProtocol::ImageData*>(&::SC2APIProtocol::ImageData::default_instance());
  creep_ = const_cast< ::SC2APIProtocol::ImageData*>(&::SC2APIProtocol::ImageData::default_instance());
}

MapState::MapState(const MapState& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.MapState)
}

void MapState::SharedCtor() {
  _cached_size_ = 0;
  visibility_ = NULL;
  creep_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapState::~MapState() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.MapState)
  SharedDtor();
}

void MapState::SharedDtor() {
  if (this != default_instance_) {
    delete visibility_;
    delete creep_;
  }
}

void MapState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapState_descriptor_;
}

const MapState& MapState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fraw_2eproto();
  return *default_instance_;
}

MapState* MapState::default_instance_ = NULL;

MapState* MapState::New(::google::protobuf::Arena* arena) const {
  MapState* n = new MapState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MapState::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.MapState)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_visibility()) {
      if (visibility_ != NULL) visibility_->::SC2APIProtocol::ImageData::Clear();
    }
    if (has_creep()) {
      if (creep_ != NULL) creep_->::SC2APIProtocol::ImageData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MapState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.MapState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.ImageData visibility = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_visibility()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_creep;
        break;
      }

      // optional .SC2APIProtocol.ImageData creep = 2;
      case 2: {
        if (tag == 18) {
         parse_creep:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creep()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.MapState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.MapState)
  return false;
#undef DO_
}

void MapState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.MapState)
  // optional .SC2APIProtocol.ImageData visibility = 1;
  if (has_visibility()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->visibility_, output);
  }

  // optional .SC2APIProtocol.ImageData creep = 2;
  if (has_creep()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->creep_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.MapState)
}

::google::protobuf::uint8* MapState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.MapState)
  // optional .SC2APIProtocol.ImageData visibility = 1;
  if (has_visibility()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->visibility_, false, target);
  }

  // optional .SC2APIProtocol.ImageData creep = 2;
  if (has_creep()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->creep_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.MapState)
  return target;
}

int MapState::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.MapState)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .SC2APIProtocol.ImageData visibility = 1;
    if (has_visibility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->visibility_);
    }

    // optional .SC2APIProtocol.ImageData creep = 2;
    if (has_creep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->creep_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.MapState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MapState* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MapState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.MapState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.MapState)
    MergeFrom(*source);
  }
}

void MapState::MergeFrom(const MapState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.MapState)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_visibility()) {
      mutable_visibility()->::SC2APIProtocol::ImageData::MergeFrom(from.visibility());
    }
    if (from.has_creep()) {
      mutable_creep()->::SC2APIProtocol::ImageData::MergeFrom(from.creep());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MapState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.MapState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapState::CopyFrom(const MapState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.MapState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapState::IsInitialized() const {

  return true;
}

void MapState::Swap(MapState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapState::InternalSwap(MapState* other) {
  std::swap(visibility_, other->visibility_);
  std::swap(creep_, other->creep_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MapState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapState_descriptor_;
  metadata.reflection = MapState_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MapState

// optional .SC2APIProtocol.ImageData visibility = 1;
bool MapState::has_visibility() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MapState::set_has_visibility() {
  _has_bits_[0] |= 0x00000001u;
}
void MapState::clear_has_visibility() {
  _has_bits_[0] &= ~0x00000001u;
}
void MapState::clear_visibility() {
  if (visibility_ != NULL) visibility_->::SC2APIProtocol::ImageData::Clear();
  clear_has_visibility();
}
const ::SC2APIProtocol::ImageData& MapState::visibility() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.MapState.visibility)
  return visibility_ != NULL ? *visibility_ : *default_instance_->visibility_;
}
::SC2APIProtocol::ImageData* MapState::mutable_visibility() {
  set_has_visibility();
  if (visibility_ == NULL) {
    visibility_ = new ::SC2APIProtocol::ImageData;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.MapState.visibility)
  return visibility_;
}
::SC2APIProtocol::ImageData* MapState::release_visibility() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.MapState.visibility)
  clear_has_visibility();
  ::SC2APIProtocol::ImageData* temp = visibility_;
  visibility_ = NULL;
  return temp;
}
void MapState::set_allocated_visibility(::SC2APIProtocol::ImageData* visibility) {
  delete visibility_;
  visibility_ = visibility;
  if (visibility) {
    set_has_visibility();
  } else {
    clear_has_visibility();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.MapState.visibility)
}

// optional .SC2APIProtocol.ImageData creep = 2;
bool MapState::has_creep() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MapState::set_has_creep() {
  _has_bits_[0] |= 0x00000002u;
}
void MapState::clear_has_creep() {
  _has_bits_[0] &= ~0x00000002u;
}
void MapState::clear_creep() {
  if (creep_ != NULL) creep_->::SC2APIProtocol::ImageData::Clear();
  clear_has_creep();
}
const ::SC2APIProtocol::ImageData& MapState::creep() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.MapState.creep)
  return creep_ != NULL ? *creep_ : *default_instance_->creep_;
}
::SC2APIProtocol::ImageData* MapState::mutable_creep() {
  set_has_creep();
  if (creep_ == NULL) {
    creep_ = new ::SC2APIProtocol::ImageData;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.MapState.creep)
  return creep_;
}
::SC2APIProtocol::ImageData* MapState::release_creep() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.MapState.creep)
  clear_has_creep();
  ::SC2APIProtocol::ImageData* temp = creep_;
  creep_ = NULL;
  return temp;
}
void MapState::set_allocated_creep(::SC2APIProtocol::ImageData* creep) {
  delete creep_;
  creep_ = creep;
  if (creep) {
    set_has_creep();
  } else {
    clear_has_creep();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.MapState.creep)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Event::kDeadUnitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Event::Event()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.Event)
}

void Event::InitAsDefaultInstance() {
}

Event::Event(const Event& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.Event)
}

void Event::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fraw_2eproto();
  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New(::google::protobuf::Arena* arena) const {
  Event* n = new Event;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.Event)
  dead_units_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.Event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 dead_units = 1;
      case 1: {
        if (tag == 8) {
         parse_dead_units:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_dead_units())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_dead_units())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_dead_units;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.Event)
  // repeated uint64 dead_units = 1;
  for (int i = 0; i < this->dead_units_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->dead_units(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.Event)
}

::google::protobuf::uint8* Event::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.Event)
  // repeated uint64 dead_units = 1;
  for (int i = 0; i < this->dead_units_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->dead_units(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.Event)
  return target;
}

int Event::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.Event)
  int total_size = 0;

  // repeated uint64 dead_units = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->dead_units_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->dead_units(i));
    }
    total_size += 1 * this->dead_units_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.Event)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Event* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Event>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.Event)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.Event)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  dead_units_.MergeFrom(from.dead_units_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {

  return true;
}

void Event::Swap(Event* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Event::InternalSwap(Event* other) {
  dead_units_.UnsafeArenaSwap(&other->dead_units_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_descriptor_;
  metadata.reflection = Event_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Event

// repeated uint64 dead_units = 1;
int Event::dead_units_size() const {
  return dead_units_.size();
}
void Event::clear_dead_units() {
  dead_units_.Clear();
}
 ::google::protobuf::uint64 Event::dead_units(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Event.dead_units)
  return dead_units_.Get(index);
}
 void Event::set_dead_units(int index, ::google::protobuf::uint64 value) {
  dead_units_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Event.dead_units)
}
 void Event::add_dead_units(::google::protobuf::uint64 value) {
  dead_units_.Add(value);
  // @@protoc_insertion_point(field_add:SC2APIProtocol.Event.dead_units)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Event::dead_units() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.Event.dead_units)
  return dead_units_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Event::mutable_dead_units() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.Event.dead_units)
  return &dead_units_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Effect::kEffectIdFieldNumber;
const int Effect::kPosFieldNumber;
const int Effect::kAllianceFieldNumber;
const int Effect::kOwnerFieldNumber;
const int Effect::kRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Effect::Effect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.Effect)
}

void Effect::InitAsDefaultInstance() {
}

Effect::Effect(const Effect& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.Effect)
}

void Effect::SharedCtor() {
  _cached_size_ = 0;
  effect_id_ = 0u;
  alliance_ = 1;
  owner_ = 0;
  radius_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Effect::~Effect() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.Effect)
  SharedDtor();
}

void Effect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Effect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Effect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Effect_descriptor_;
}

const Effect& Effect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fraw_2eproto();
  return *default_instance_;
}

Effect* Effect::default_instance_ = NULL;

Effect* Effect::New(::google::protobuf::Arena* arena) const {
  Effect* n = new Effect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Effect::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.Effect)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Effect, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Effect*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 29u) {
    ZR_(owner_, radius_);
    effect_id_ = 0u;
    alliance_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Effect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.Effect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 effect_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_id_)));
          set_has_effect_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // repeated .SC2APIProtocol.Point2D pos = 2;
      case 2: {
        if (tag == 18) {
         parse_pos:
          DO_(input->IncrementRecursionDepth());
         parse_loop_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_pos;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_alliance;
        break;
      }

      // optional .SC2APIProtocol.Alliance alliance = 3;
      case 3: {
        if (tag == 24) {
         parse_alliance:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::Alliance_IsValid(value)) {
            set_alliance(static_cast< ::SC2APIProtocol::Alliance >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_owner;
        break;
      }

      // optional int32 owner = 4;
      case 4: {
        if (tag == 32) {
         parse_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &owner_)));
          set_has_owner();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_radius;
        break;
      }

      // optional float radius = 5;
      case 5: {
        if (tag == 45) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.Effect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.Effect)
  return false;
#undef DO_
}

void Effect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.Effect)
  // optional uint32 effect_id = 1;
  if (has_effect_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->effect_id(), output);
  }

  // repeated .SC2APIProtocol.Point2D pos = 2;
  for (unsigned int i = 0, n = this->pos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(i), output);
  }

  // optional .SC2APIProtocol.Alliance alliance = 3;
  if (has_alliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->alliance(), output);
  }

  // optional int32 owner = 4;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->owner(), output);
  }

  // optional float radius = 5;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->radius(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.Effect)
}

::google::protobuf::uint8* Effect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.Effect)
  // optional uint32 effect_id = 1;
  if (has_effect_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->effect_id(), target);
  }

  // repeated .SC2APIProtocol.Point2D pos = 2;
  for (unsigned int i = 0, n = this->pos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->pos(i), false, target);
  }

  // optional .SC2APIProtocol.Alliance alliance = 3;
  if (has_alliance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->alliance(), target);
  }

  // optional int32 owner = 4;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->owner(), target);
  }

  // optional float radius = 5;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->radius(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.Effect)
  return target;
}

int Effect::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.Effect)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 29u) {
    // optional uint32 effect_id = 1;
    if (has_effect_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect_id());
    }

    // optional .SC2APIProtocol.Alliance alliance = 3;
    if (has_alliance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->alliance());
    }

    // optional int32 owner = 4;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->owner());
    }

    // optional float radius = 5;
    if (has_radius()) {
      total_size += 1 + 4;
    }

  }
  // repeated .SC2APIProtocol.Point2D pos = 2;
  total_size += 1 * this->pos_size();
  for (int i = 0; i < this->pos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pos(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Effect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.Effect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Effect* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Effect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.Effect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.Effect)
    MergeFrom(*source);
  }
}

void Effect::MergeFrom(const Effect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.Effect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  pos_.MergeFrom(from.pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_effect_id()) {
      set_effect_id(from.effect_id());
    }
    if (from.has_alliance()) {
      set_alliance(from.alliance());
    }
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Effect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.Effect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Effect::CopyFrom(const Effect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.Effect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Effect::IsInitialized() const {

  return true;
}

void Effect::Swap(Effect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Effect::InternalSwap(Effect* other) {
  std::swap(effect_id_, other->effect_id_);
  pos_.UnsafeArenaSwap(&other->pos_);
  std::swap(alliance_, other->alliance_);
  std::swap(owner_, other->owner_);
  std::swap(radius_, other->radius_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Effect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Effect_descriptor_;
  metadata.reflection = Effect_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Effect

// optional uint32 effect_id = 1;
bool Effect::has_effect_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Effect::set_has_effect_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Effect::clear_has_effect_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Effect::clear_effect_id() {
  effect_id_ = 0u;
  clear_has_effect_id();
}
 ::google::protobuf::uint32 Effect::effect_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Effect.effect_id)
  return effect_id_;
}
 void Effect::set_effect_id(::google::protobuf::uint32 value) {
  set_has_effect_id();
  effect_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Effect.effect_id)
}

// repeated .SC2APIProtocol.Point2D pos = 2;
int Effect::pos_size() const {
  return pos_.size();
}
void Effect::clear_pos() {
  pos_.Clear();
}
const ::SC2APIProtocol::Point2D& Effect::pos(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Effect.pos)
  return pos_.Get(index);
}
::SC2APIProtocol::Point2D* Effect::mutable_pos(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Effect.pos)
  return pos_.Mutable(index);
}
::SC2APIProtocol::Point2D* Effect::add_pos() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.Effect.pos)
  return pos_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::Point2D >*
Effect::mutable_pos() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.Effect.pos)
  return &pos_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::Point2D >&
Effect::pos() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.Effect.pos)
  return pos_;
}

// optional .SC2APIProtocol.Alliance alliance = 3;
bool Effect::has_alliance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Effect::set_has_alliance() {
  _has_bits_[0] |= 0x00000004u;
}
void Effect::clear_has_alliance() {
  _has_bits_[0] &= ~0x00000004u;
}
void Effect::clear_alliance() {
  alliance_ = 1;
  clear_has_alliance();
}
 ::SC2APIProtocol::Alliance Effect::alliance() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Effect.alliance)
  return static_cast< ::SC2APIProtocol::Alliance >(alliance_);
}
 void Effect::set_alliance(::SC2APIProtocol::Alliance value) {
  assert(::SC2APIProtocol::Alliance_IsValid(value));
  set_has_alliance();
  alliance_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Effect.alliance)
}

// optional int32 owner = 4;
bool Effect::has_owner() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Effect::set_has_owner() {
  _has_bits_[0] |= 0x00000008u;
}
void Effect::clear_has_owner() {
  _has_bits_[0] &= ~0x00000008u;
}
void Effect::clear_owner() {
  owner_ = 0;
  clear_has_owner();
}
 ::google::protobuf::int32 Effect::owner() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Effect.owner)
  return owner_;
}
 void Effect::set_owner(::google::protobuf::int32 value) {
  set_has_owner();
  owner_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Effect.owner)
}

// optional float radius = 5;
bool Effect::has_radius() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Effect::set_has_radius() {
  _has_bits_[0] |= 0x00000010u;
}
void Effect::clear_has_radius() {
  _has_bits_[0] &= ~0x00000010u;
}
void Effect::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
 float Effect::radius() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Effect.radius)
  return radius_;
}
 void Effect::set_radius(float value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Effect.radius)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionRaw::kUnitCommandFieldNumber;
const int ActionRaw::kCameraMoveFieldNumber;
const int ActionRaw::kToggleAutocastFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionRaw::ActionRaw()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ActionRaw)
}

void ActionRaw::InitAsDefaultInstance() {
  ActionRaw_default_oneof_instance_->unit_command_ = const_cast< ::SC2APIProtocol::ActionRawUnitCommand*>(&::SC2APIProtocol::ActionRawUnitCommand::default_instance());
  ActionRaw_default_oneof_instance_->camera_move_ = const_cast< ::SC2APIProtocol::ActionRawCameraMove*>(&::SC2APIProtocol::ActionRawCameraMove::default_instance());
  ActionRaw_default_oneof_instance_->toggle_autocast_ = const_cast< ::SC2APIProtocol::ActionRawToggleAutocast*>(&::SC2APIProtocol::ActionRawToggleAutocast::default_instance());
}

ActionRaw::ActionRaw(const ActionRaw& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionRaw)
}

void ActionRaw::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_action();
}

ActionRaw::~ActionRaw() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionRaw)
  SharedDtor();
}

void ActionRaw::SharedDtor() {
  if (has_action()) {
    clear_action();
  }
  if (this != default_instance_) {
  }
}

void ActionRaw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionRaw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionRaw_descriptor_;
}

const ActionRaw& ActionRaw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fraw_2eproto();
  return *default_instance_;
}

ActionRaw* ActionRaw::default_instance_ = NULL;

ActionRaw* ActionRaw::New(::google::protobuf::Arena* arena) const {
  ActionRaw* n = new ActionRaw;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionRaw::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.ActionRaw)
  switch(action_case()) {
    case kUnitCommand: {
      delete action_.unit_command_;
      break;
    }
    case kCameraMove: {
      delete action_.camera_move_;
      break;
    }
    case kToggleAutocast: {
      delete action_.toggle_autocast_;
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void ActionRaw::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionRaw)
  clear_action();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActionRaw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ActionRaw)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.ActionRawUnitCommand unit_command = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unit_command()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_camera_move;
        break;
      }

      // optional .SC2APIProtocol.ActionRawCameraMove camera_move = 2;
      case 2: {
        if (tag == 18) {
         parse_camera_move:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera_move()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_toggle_autocast;
        break;
      }

      // optional .SC2APIProtocol.ActionRawToggleAutocast toggle_autocast = 3;
      case 3: {
        if (tag == 26) {
         parse_toggle_autocast:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toggle_autocast()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ActionRaw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ActionRaw)
  return false;
#undef DO_
}

void ActionRaw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ActionRaw)
  // optional .SC2APIProtocol.ActionRawUnitCommand unit_command = 1;
  if (has_unit_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *action_.unit_command_, output);
  }

  // optional .SC2APIProtocol.ActionRawCameraMove camera_move = 2;
  if (has_camera_move()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *action_.camera_move_, output);
  }

  // optional .SC2APIProtocol.ActionRawToggleAutocast toggle_autocast = 3;
  if (has_toggle_autocast()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *action_.toggle_autocast_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ActionRaw)
}

::google::protobuf::uint8* ActionRaw::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionRaw)
  // optional .SC2APIProtocol.ActionRawUnitCommand unit_command = 1;
  if (has_unit_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *action_.unit_command_, false, target);
  }

  // optional .SC2APIProtocol.ActionRawCameraMove camera_move = 2;
  if (has_camera_move()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *action_.camera_move_, false, target);
  }

  // optional .SC2APIProtocol.ActionRawToggleAutocast toggle_autocast = 3;
  if (has_toggle_autocast()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *action_.toggle_autocast_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionRaw)
  return target;
}

int ActionRaw::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionRaw)
  int total_size = 0;

  switch (action_case()) {
    // optional .SC2APIProtocol.ActionRawUnitCommand unit_command = 1;
    case kUnitCommand: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *action_.unit_command_);
      break;
    }
    // optional .SC2APIProtocol.ActionRawCameraMove camera_move = 2;
    case kCameraMove: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *action_.camera_move_);
      break;
    }
    // optional .SC2APIProtocol.ActionRawToggleAutocast toggle_autocast = 3;
    case kToggleAutocast: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *action_.toggle_autocast_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionRaw::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ActionRaw)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ActionRaw* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionRaw>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ActionRaw)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ActionRaw)
    MergeFrom(*source);
  }
}

void ActionRaw::MergeFrom(const ActionRaw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionRaw)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.action_case()) {
    case kUnitCommand: {
      mutable_unit_command()->::SC2APIProtocol::ActionRawUnitCommand::MergeFrom(from.unit_command());
      break;
    }
    case kCameraMove: {
      mutable_camera_move()->::SC2APIProtocol::ActionRawCameraMove::MergeFrom(from.camera_move());
      break;
    }
    case kToggleAutocast: {
      mutable_toggle_autocast()->::SC2APIProtocol::ActionRawToggleAutocast::MergeFrom(from.toggle_autocast());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActionRaw::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ActionRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionRaw::CopyFrom(const ActionRaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionRaw::IsInitialized() const {

  return true;
}

void ActionRaw::Swap(ActionRaw* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionRaw::InternalSwap(ActionRaw* other) {
  std::swap(action_, other->action_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionRaw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionRaw_descriptor_;
  metadata.reflection = ActionRaw_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionRaw

// optional .SC2APIProtocol.ActionRawUnitCommand unit_command = 1;
bool ActionRaw::has_unit_command() const {
  return action_case() == kUnitCommand;
}
void ActionRaw::set_has_unit_command() {
  _oneof_case_[0] = kUnitCommand;
}
void ActionRaw::clear_unit_command() {
  if (has_unit_command()) {
    delete action_.unit_command_;
    clear_has_action();
  }
}
 const ::SC2APIProtocol::ActionRawUnitCommand& ActionRaw::unit_command() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionRaw.unit_command)
  return has_unit_command()
      ? *action_.unit_command_
      : ::SC2APIProtocol::ActionRawUnitCommand::default_instance();
}
::SC2APIProtocol::ActionRawUnitCommand* ActionRaw::mutable_unit_command() {
  if (!has_unit_command()) {
    clear_action();
    set_has_unit_command();
    action_.unit_command_ = new ::SC2APIProtocol::ActionRawUnitCommand;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionRaw.unit_command)
  return action_.unit_command_;
}
::SC2APIProtocol::ActionRawUnitCommand* ActionRaw::release_unit_command() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ActionRaw.unit_command)
  if (has_unit_command()) {
    clear_has_action();
    ::SC2APIProtocol::ActionRawUnitCommand* temp = action_.unit_command_;
    action_.unit_command_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ActionRaw::set_allocated_unit_command(::SC2APIProtocol::ActionRawUnitCommand* unit_command) {
  clear_action();
  if (unit_command) {
    set_has_unit_command();
    action_.unit_command_ = unit_command;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionRaw.unit_command)
}

// optional .SC2APIProtocol.ActionRawCameraMove camera_move = 2;
bool ActionRaw::has_camera_move() const {
  return action_case() == kCameraMove;
}
void ActionRaw::set_has_camera_move() {
  _oneof_case_[0] = kCameraMove;
}
void ActionRaw::clear_camera_move() {
  if (has_camera_move()) {
    delete action_.camera_move_;
    clear_has_action();
  }
}
 const ::SC2APIProtocol::ActionRawCameraMove& ActionRaw::camera_move() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionRaw.camera_move)
  return has_camera_move()
      ? *action_.camera_move_
      : ::SC2APIProtocol::ActionRawCameraMove::default_instance();
}
::SC2APIProtocol::ActionRawCameraMove* ActionRaw::mutable_camera_move() {
  if (!has_camera_move()) {
    clear_action();
    set_has_camera_move();
    action_.camera_move_ = new ::SC2APIProtocol::ActionRawCameraMove;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionRaw.camera_move)
  return action_.camera_move_;
}
::SC2APIProtocol::ActionRawCameraMove* ActionRaw::release_camera_move() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ActionRaw.camera_move)
  if (has_camera_move()) {
    clear_has_action();
    ::SC2APIProtocol::ActionRawCameraMove* temp = action_.camera_move_;
    action_.camera_move_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ActionRaw::set_allocated_camera_move(::SC2APIProtocol::ActionRawCameraMove* camera_move) {
  clear_action();
  if (camera_move) {
    set_has_camera_move();
    action_.camera_move_ = camera_move;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionRaw.camera_move)
}

// optional .SC2APIProtocol.ActionRawToggleAutocast toggle_autocast = 3;
bool ActionRaw::has_toggle_autocast() const {
  return action_case() == kToggleAutocast;
}
void ActionRaw::set_has_toggle_autocast() {
  _oneof_case_[0] = kToggleAutocast;
}
void ActionRaw::clear_toggle_autocast() {
  if (has_toggle_autocast()) {
    delete action_.toggle_autocast_;
    clear_has_action();
  }
}
 const ::SC2APIProtocol::ActionRawToggleAutocast& ActionRaw::toggle_autocast() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionRaw.toggle_autocast)
  return has_toggle_autocast()
      ? *action_.toggle_autocast_
      : ::SC2APIProtocol::ActionRawToggleAutocast::default_instance();
}
::SC2APIProtocol::ActionRawToggleAutocast* ActionRaw::mutable_toggle_autocast() {
  if (!has_toggle_autocast()) {
    clear_action();
    set_has_toggle_autocast();
    action_.toggle_autocast_ = new ::SC2APIProtocol::ActionRawToggleAutocast;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionRaw.toggle_autocast)
  return action_.toggle_autocast_;
}
::SC2APIProtocol::ActionRawToggleAutocast* ActionRaw::release_toggle_autocast() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ActionRaw.toggle_autocast)
  if (has_toggle_autocast()) {
    clear_has_action();
    ::SC2APIProtocol::ActionRawToggleAutocast* temp = action_.toggle_autocast_;
    action_.toggle_autocast_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ActionRaw::set_allocated_toggle_autocast(::SC2APIProtocol::ActionRawToggleAutocast* toggle_autocast) {
  clear_action();
  if (toggle_autocast) {
    set_has_toggle_autocast();
    action_.toggle_autocast_ = toggle_autocast;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionRaw.toggle_autocast)
}

bool ActionRaw::has_action() const {
  return action_case() != ACTION_NOT_SET;
}
void ActionRaw::clear_has_action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
ActionRaw::ActionCase ActionRaw::action_case() const {
  return ActionRaw::ActionCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionRawUnitCommand::kAbilityIdFieldNumber;
const int ActionRawUnitCommand::kTargetWorldSpacePosFieldNumber;
const int ActionRawUnitCommand::kTargetUnitTagFieldNumber;
const int ActionRawUnitCommand::kUnitTagsFieldNumber;
const int ActionRawUnitCommand::kQueueCommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionRawUnitCommand::ActionRawUnitCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ActionRawUnitCommand)
}

void ActionRawUnitCommand::InitAsDefaultInstance() {
  ActionRawUnitCommand_default_oneof_instance_->target_world_space_pos_ = const_cast< ::SC2APIProtocol::Point2D*>(&::SC2APIProtocol::Point2D::default_instance());
  ActionRawUnitCommand_default_oneof_instance_->target_unit_tag_ = GOOGLE_ULONGLONG(0);
}

ActionRawUnitCommand::ActionRawUnitCommand(const ActionRawUnitCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionRawUnitCommand)
}

void ActionRawUnitCommand::SharedCtor() {
  _cached_size_ = 0;
  ability_id_ = 0;
  queue_command_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_target();
}

ActionRawUnitCommand::~ActionRawUnitCommand() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionRawUnitCommand)
  SharedDtor();
}

void ActionRawUnitCommand::SharedDtor() {
  if (has_target()) {
    clear_target();
  }
  if (this != default_instance_) {
  }
}

void ActionRawUnitCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionRawUnitCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionRawUnitCommand_descriptor_;
}

const ActionRawUnitCommand& ActionRawUnitCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fraw_2eproto();
  return *default_instance_;
}

ActionRawUnitCommand* ActionRawUnitCommand::default_instance_ = NULL;

ActionRawUnitCommand* ActionRawUnitCommand::New(::google::protobuf::Arena* arena) const {
  ActionRawUnitCommand* n = new ActionRawUnitCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionRawUnitCommand::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.ActionRawUnitCommand)
  switch(target_case()) {
    case kTargetWorldSpacePos: {
      delete target_.target_world_space_pos_;
      break;
    }
    case kTargetUnitTag: {
      // No need to clear
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void ActionRawUnitCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionRawUnitCommand)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ActionRawUnitCommand, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ActionRawUnitCommand*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ability_id_, queue_command_);

#undef ZR_HELPER_
#undef ZR_

  unit_tags_.Clear();
  clear_target();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActionRawUnitCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ActionRawUnitCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ability_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ability_id_)));
          set_has_ability_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_target_world_space_pos;
        break;
      }

      // optional .SC2APIProtocol.Point2D target_world_space_pos = 2;
      case 2: {
        if (tag == 18) {
         parse_target_world_space_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_world_space_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_target_unit_tag;
        break;
      }

      // optional uint64 target_unit_tag = 3;
      case 3: {
        if (tag == 24) {
         parse_target_unit_tag:
          clear_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_.target_unit_tag_)));
          set_has_target_unit_tag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_unit_tags;
        break;
      }

      // repeated uint64 unit_tags = 4;
      case 4: {
        if (tag == 32) {
         parse_unit_tags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_unit_tags())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_unit_tags())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_unit_tags;
        if (input->ExpectTag(40)) goto parse_queue_command;
        break;
      }

      // optional bool queue_command = 5;
      case 5: {
        if (tag == 40) {
         parse_queue_command:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &queue_command_)));
          set_has_queue_command();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ActionRawUnitCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ActionRawUnitCommand)
  return false;
#undef DO_
}

void ActionRawUnitCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ActionRawUnitCommand)
  // optional int32 ability_id = 1;
  if (has_ability_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ability_id(), output);
  }

  // optional .SC2APIProtocol.Point2D target_world_space_pos = 2;
  if (has_target_world_space_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *target_.target_world_space_pos_, output);
  }

  // optional uint64 target_unit_tag = 3;
  if (has_target_unit_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->target_unit_tag(), output);
  }

  // repeated uint64 unit_tags = 4;
  for (int i = 0; i < this->unit_tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->unit_tags(i), output);
  }

  // optional bool queue_command = 5;
  if (has_queue_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->queue_command(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ActionRawUnitCommand)
}

::google::protobuf::uint8* ActionRawUnitCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionRawUnitCommand)
  // optional int32 ability_id = 1;
  if (has_ability_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ability_id(), target);
  }

  // optional .SC2APIProtocol.Point2D target_world_space_pos = 2;
  if (has_target_world_space_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *target_.target_world_space_pos_, false, target);
  }

  // optional uint64 target_unit_tag = 3;
  if (has_target_unit_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->target_unit_tag(), target);
  }

  // repeated uint64 unit_tags = 4;
  for (int i = 0; i < this->unit_tags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->unit_tags(i), target);
  }

  // optional bool queue_command = 5;
  if (has_queue_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->queue_command(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionRawUnitCommand)
  return target;
}

int ActionRawUnitCommand::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionRawUnitCommand)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 17u) {
    // optional int32 ability_id = 1;
    if (has_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ability_id());
    }

    // optional bool queue_command = 5;
    if (has_queue_command()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint64 unit_tags = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->unit_tags_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->unit_tags(i));
    }
    total_size += 1 * this->unit_tags_size() + data_size;
  }

  switch (target_case()) {
    // optional .SC2APIProtocol.Point2D target_world_space_pos = 2;
    case kTargetWorldSpacePos: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *target_.target_world_space_pos_);
      break;
    }
    // optional uint64 target_unit_tag = 3;
    case kTargetUnitTag: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->target_unit_tag());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionRawUnitCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ActionRawUnitCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ActionRawUnitCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionRawUnitCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ActionRawUnitCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ActionRawUnitCommand)
    MergeFrom(*source);
  }
}

void ActionRawUnitCommand::MergeFrom(const ActionRawUnitCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionRawUnitCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  unit_tags_.MergeFrom(from.unit_tags_);
  switch (from.target_case()) {
    case kTargetWorldSpacePos: {
      mutable_target_world_space_pos()->::SC2APIProtocol::Point2D::MergeFrom(from.target_world_space_pos());
      break;
    }
    case kTargetUnitTag: {
      set_target_unit_tag(from.target_unit_tag());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ability_id()) {
      set_ability_id(from.ability_id());
    }
    if (from.has_queue_command()) {
      set_queue_command(from.queue_command());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActionRawUnitCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ActionRawUnitCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionRawUnitCommand::CopyFrom(const ActionRawUnitCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionRawUnitCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionRawUnitCommand::IsInitialized() const {

  return true;
}

void ActionRawUnitCommand::Swap(ActionRawUnitCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionRawUnitCommand::InternalSwap(ActionRawUnitCommand* other) {
  std::swap(ability_id_, other->ability_id_);
  unit_tags_.UnsafeArenaSwap(&other->unit_tags_);
  std::swap(queue_command_, other->queue_command_);
  std::swap(target_, other->target_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionRawUnitCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionRawUnitCommand_descriptor_;
  metadata.reflection = ActionRawUnitCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionRawUnitCommand

// optional int32 ability_id = 1;
bool ActionRawUnitCommand::has_ability_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActionRawUnitCommand::set_has_ability_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ActionRawUnitCommand::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActionRawUnitCommand::clear_ability_id() {
  ability_id_ = 0;
  clear_has_ability_id();
}
 ::google::protobuf::int32 ActionRawUnitCommand::ability_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionRawUnitCommand.ability_id)
  return ability_id_;
}
 void ActionRawUnitCommand::set_ability_id(::google::protobuf::int32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionRawUnitCommand.ability_id)
}

// optional .SC2APIProtocol.Point2D target_world_space_pos = 2;
bool ActionRawUnitCommand::has_target_world_space_pos() const {
  return target_case() == kTargetWorldSpacePos;
}
void ActionRawUnitCommand::set_has_target_world_space_pos() {
  _oneof_case_[0] = kTargetWorldSpacePos;
}
void ActionRawUnitCommand::clear_target_world_space_pos() {
  if (has_target_world_space_pos()) {
    delete target_.target_world_space_pos_;
    clear_has_target();
  }
}
 const ::SC2APIProtocol::Point2D& ActionRawUnitCommand::target_world_space_pos() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionRawUnitCommand.target_world_space_pos)
  return has_target_world_space_pos()
      ? *target_.target_world_space_pos_
      : ::SC2APIProtocol::Point2D::default_instance();
}
::SC2APIProtocol::Point2D* ActionRawUnitCommand::mutable_target_world_space_pos() {
  if (!has_target_world_space_pos()) {
    clear_target();
    set_has_target_world_space_pos();
    target_.target_world_space_pos_ = new ::SC2APIProtocol::Point2D;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionRawUnitCommand.target_world_space_pos)
  return target_.target_world_space_pos_;
}
::SC2APIProtocol::Point2D* ActionRawUnitCommand::release_target_world_space_pos() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ActionRawUnitCommand.target_world_space_pos)
  if (has_target_world_space_pos()) {
    clear_has_target();
    ::SC2APIProtocol::Point2D* temp = target_.target_world_space_pos_;
    target_.target_world_space_pos_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ActionRawUnitCommand::set_allocated_target_world_space_pos(::SC2APIProtocol::Point2D* target_world_space_pos) {
  clear_target();
  if (target_world_space_pos) {
    set_has_target_world_space_pos();
    target_.target_world_space_pos_ = target_world_space_pos;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionRawUnitCommand.target_world_space_pos)
}

// optional uint64 target_unit_tag = 3;
bool ActionRawUnitCommand::has_target_unit_tag() const {
  return target_case() == kTargetUnitTag;
}
void ActionRawUnitCommand::set_has_target_unit_tag() {
  _oneof_case_[0] = kTargetUnitTag;
}
void ActionRawUnitCommand::clear_target_unit_tag() {
  if (has_target_unit_tag()) {
    target_.target_unit_tag_ = GOOGLE_ULONGLONG(0);
    clear_has_target();
  }
}
 ::google::protobuf::uint64 ActionRawUnitCommand::target_unit_tag() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionRawUnitCommand.target_unit_tag)
  if (has_target_unit_tag()) {
    return target_.target_unit_tag_;
  }
  return GOOGLE_ULONGLONG(0);
}
 void ActionRawUnitCommand::set_target_unit_tag(::google::protobuf::uint64 value) {
  if (!has_target_unit_tag()) {
    clear_target();
    set_has_target_unit_tag();
  }
  target_.target_unit_tag_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionRawUnitCommand.target_unit_tag)
}

// repeated uint64 unit_tags = 4;
int ActionRawUnitCommand::unit_tags_size() const {
  return unit_tags_.size();
}
void ActionRawUnitCommand::clear_unit_tags() {
  unit_tags_.Clear();
}
 ::google::protobuf::uint64 ActionRawUnitCommand::unit_tags(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionRawUnitCommand.unit_tags)
  return unit_tags_.Get(index);
}
 void ActionRawUnitCommand::set_unit_tags(int index, ::google::protobuf::uint64 value) {
  unit_tags_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionRawUnitCommand.unit_tags)
}
 void ActionRawUnitCommand::add_unit_tags(::google::protobuf::uint64 value) {
  unit_tags_.Add(value);
  // @@protoc_insertion_point(field_add:SC2APIProtocol.ActionRawUnitCommand.unit_tags)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ActionRawUnitCommand::unit_tags() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.ActionRawUnitCommand.unit_tags)
  return unit_tags_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ActionRawUnitCommand::mutable_unit_tags() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.ActionRawUnitCommand.unit_tags)
  return &unit_tags_;
}

// optional bool queue_command = 5;
bool ActionRawUnitCommand::has_queue_command() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ActionRawUnitCommand::set_has_queue_command() {
  _has_bits_[0] |= 0x00000010u;
}
void ActionRawUnitCommand::clear_has_queue_command() {
  _has_bits_[0] &= ~0x00000010u;
}
void ActionRawUnitCommand::clear_queue_command() {
  queue_command_ = false;
  clear_has_queue_command();
}
 bool ActionRawUnitCommand::queue_command() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionRawUnitCommand.queue_command)
  return queue_command_;
}
 void ActionRawUnitCommand::set_queue_command(bool value) {
  set_has_queue_command();
  queue_command_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionRawUnitCommand.queue_command)
}

bool ActionRawUnitCommand::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
void ActionRawUnitCommand::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
ActionRawUnitCommand::TargetCase ActionRawUnitCommand::target_case() const {
  return ActionRawUnitCommand::TargetCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionRawCameraMove::kCenterWorldSpaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionRawCameraMove::ActionRawCameraMove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ActionRawCameraMove)
}

void ActionRawCameraMove::InitAsDefaultInstance() {
  center_world_space_ = const_cast< ::SC2APIProtocol::Point*>(&::SC2APIProtocol::Point::default_instance());
}

ActionRawCameraMove::ActionRawCameraMove(const ActionRawCameraMove& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionRawCameraMove)
}

void ActionRawCameraMove::SharedCtor() {
  _cached_size_ = 0;
  center_world_space_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionRawCameraMove::~ActionRawCameraMove() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionRawCameraMove)
  SharedDtor();
}

void ActionRawCameraMove::SharedDtor() {
  if (this != default_instance_) {
    delete center_world_space_;
  }
}

void ActionRawCameraMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionRawCameraMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionRawCameraMove_descriptor_;
}

const ActionRawCameraMove& ActionRawCameraMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fraw_2eproto();
  return *default_instance_;
}

ActionRawCameraMove* ActionRawCameraMove::default_instance_ = NULL;

ActionRawCameraMove* ActionRawCameraMove::New(::google::protobuf::Arena* arena) const {
  ActionRawCameraMove* n = new ActionRawCameraMove;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionRawCameraMove::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionRawCameraMove)
  if (has_center_world_space()) {
    if (center_world_space_ != NULL) center_world_space_->::SC2APIProtocol::Point::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActionRawCameraMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ActionRawCameraMove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.Point center_world_space = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center_world_space()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ActionRawCameraMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ActionRawCameraMove)
  return false;
#undef DO_
}

void ActionRawCameraMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ActionRawCameraMove)
  // optional .SC2APIProtocol.Point center_world_space = 1;
  if (has_center_world_space()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->center_world_space_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ActionRawCameraMove)
}

::google::protobuf::uint8* ActionRawCameraMove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionRawCameraMove)
  // optional .SC2APIProtocol.Point center_world_space = 1;
  if (has_center_world_space()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->center_world_space_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionRawCameraMove)
  return target;
}

int ActionRawCameraMove::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionRawCameraMove)
  int total_size = 0;

  // optional .SC2APIProtocol.Point center_world_space = 1;
  if (has_center_world_space()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->center_world_space_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionRawCameraMove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ActionRawCameraMove)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ActionRawCameraMove* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionRawCameraMove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ActionRawCameraMove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ActionRawCameraMove)
    MergeFrom(*source);
  }
}

void ActionRawCameraMove::MergeFrom(const ActionRawCameraMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionRawCameraMove)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_center_world_space()) {
      mutable_center_world_space()->::SC2APIProtocol::Point::MergeFrom(from.center_world_space());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActionRawCameraMove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ActionRawCameraMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionRawCameraMove::CopyFrom(const ActionRawCameraMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionRawCameraMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionRawCameraMove::IsInitialized() const {

  return true;
}

void ActionRawCameraMove::Swap(ActionRawCameraMove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionRawCameraMove::InternalSwap(ActionRawCameraMove* other) {
  std::swap(center_world_space_, other->center_world_space_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionRawCameraMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionRawCameraMove_descriptor_;
  metadata.reflection = ActionRawCameraMove_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionRawCameraMove

// optional .SC2APIProtocol.Point center_world_space = 1;
bool ActionRawCameraMove::has_center_world_space() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActionRawCameraMove::set_has_center_world_space() {
  _has_bits_[0] |= 0x00000001u;
}
void ActionRawCameraMove::clear_has_center_world_space() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActionRawCameraMove::clear_center_world_space() {
  if (center_world_space_ != NULL) center_world_space_->::SC2APIProtocol::Point::Clear();
  clear_has_center_world_space();
}
const ::SC2APIProtocol::Point& ActionRawCameraMove::center_world_space() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionRawCameraMove.center_world_space)
  return center_world_space_ != NULL ? *center_world_space_ : *default_instance_->center_world_space_;
}
::SC2APIProtocol::Point* ActionRawCameraMove::mutable_center_world_space() {
  set_has_center_world_space();
  if (center_world_space_ == NULL) {
    center_world_space_ = new ::SC2APIProtocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionRawCameraMove.center_world_space)
  return center_world_space_;
}
::SC2APIProtocol::Point* ActionRawCameraMove::release_center_world_space() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ActionRawCameraMove.center_world_space)
  clear_has_center_world_space();
  ::SC2APIProtocol::Point* temp = center_world_space_;
  center_world_space_ = NULL;
  return temp;
}
void ActionRawCameraMove::set_allocated_center_world_space(::SC2APIProtocol::Point* center_world_space) {
  delete center_world_space_;
  center_world_space_ = center_world_space;
  if (center_world_space) {
    set_has_center_world_space();
  } else {
    clear_has_center_world_space();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionRawCameraMove.center_world_space)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionRawToggleAutocast::kAbilityIdFieldNumber;
const int ActionRawToggleAutocast::kUnitTagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionRawToggleAutocast::ActionRawToggleAutocast()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ActionRawToggleAutocast)
}

void ActionRawToggleAutocast::InitAsDefaultInstance() {
}

ActionRawToggleAutocast::ActionRawToggleAutocast(const ActionRawToggleAutocast& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionRawToggleAutocast)
}

void ActionRawToggleAutocast::SharedCtor() {
  _cached_size_ = 0;
  ability_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionRawToggleAutocast::~ActionRawToggleAutocast() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionRawToggleAutocast)
  SharedDtor();
}

void ActionRawToggleAutocast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionRawToggleAutocast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionRawToggleAutocast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionRawToggleAutocast_descriptor_;
}

const ActionRawToggleAutocast& ActionRawToggleAutocast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fraw_2eproto();
  return *default_instance_;
}

ActionRawToggleAutocast* ActionRawToggleAutocast::default_instance_ = NULL;

ActionRawToggleAutocast* ActionRawToggleAutocast::New(::google::protobuf::Arena* arena) const {
  ActionRawToggleAutocast* n = new ActionRawToggleAutocast;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionRawToggleAutocast::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionRawToggleAutocast)
  ability_id_ = 0;
  unit_tags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActionRawToggleAutocast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ActionRawToggleAutocast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ability_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ability_id_)));
          set_has_ability_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unit_tags;
        break;
      }

      // repeated uint64 unit_tags = 2;
      case 2: {
        if (tag == 16) {
         parse_unit_tags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_unit_tags())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_unit_tags())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unit_tags;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ActionRawToggleAutocast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ActionRawToggleAutocast)
  return false;
#undef DO_
}

void ActionRawToggleAutocast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ActionRawToggleAutocast)
  // optional int32 ability_id = 1;
  if (has_ability_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ability_id(), output);
  }

  // repeated uint64 unit_tags = 2;
  for (int i = 0; i < this->unit_tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->unit_tags(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ActionRawToggleAutocast)
}

::google::protobuf::uint8* ActionRawToggleAutocast::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionRawToggleAutocast)
  // optional int32 ability_id = 1;
  if (has_ability_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ability_id(), target);
  }

  // repeated uint64 unit_tags = 2;
  for (int i = 0; i < this->unit_tags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->unit_tags(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionRawToggleAutocast)
  return target;
}

int ActionRawToggleAutocast::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionRawToggleAutocast)
  int total_size = 0;

  // optional int32 ability_id = 1;
  if (has_ability_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ability_id());
  }

  // repeated uint64 unit_tags = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->unit_tags_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->unit_tags(i));
    }
    total_size += 1 * this->unit_tags_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionRawToggleAutocast::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ActionRawToggleAutocast)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ActionRawToggleAutocast* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionRawToggleAutocast>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ActionRawToggleAutocast)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ActionRawToggleAutocast)
    MergeFrom(*source);
  }
}

void ActionRawToggleAutocast::MergeFrom(const ActionRawToggleAutocast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionRawToggleAutocast)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  unit_tags_.MergeFrom(from.unit_tags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ability_id()) {
      set_ability_id(from.ability_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActionRawToggleAutocast::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ActionRawToggleAutocast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionRawToggleAutocast::CopyFrom(const ActionRawToggleAutocast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionRawToggleAutocast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionRawToggleAutocast::IsInitialized() const {

  return true;
}

void ActionRawToggleAutocast::Swap(ActionRawToggleAutocast* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionRawToggleAutocast::InternalSwap(ActionRawToggleAutocast* other) {
  std::swap(ability_id_, other->ability_id_);
  unit_tags_.UnsafeArenaSwap(&other->unit_tags_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionRawToggleAutocast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionRawToggleAutocast_descriptor_;
  metadata.reflection = ActionRawToggleAutocast_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionRawToggleAutocast

// optional int32 ability_id = 1;
bool ActionRawToggleAutocast::has_ability_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActionRawToggleAutocast::set_has_ability_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ActionRawToggleAutocast::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActionRawToggleAutocast::clear_ability_id() {
  ability_id_ = 0;
  clear_has_ability_id();
}
 ::google::protobuf::int32 ActionRawToggleAutocast::ability_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionRawToggleAutocast.ability_id)
  return ability_id_;
}
 void ActionRawToggleAutocast::set_ability_id(::google::protobuf::int32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionRawToggleAutocast.ability_id)
}

// repeated uint64 unit_tags = 2;
int ActionRawToggleAutocast::unit_tags_size() const {
  return unit_tags_.size();
}
void ActionRawToggleAutocast::clear_unit_tags() {
  unit_tags_.Clear();
}
 ::google::protobuf::uint64 ActionRawToggleAutocast::unit_tags(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionRawToggleAutocast.unit_tags)
  return unit_tags_.Get(index);
}
 void ActionRawToggleAutocast::set_unit_tags(int index, ::google::protobuf::uint64 value) {
  unit_tags_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionRawToggleAutocast.unit_tags)
}
 void ActionRawToggleAutocast::add_unit_tags(::google::protobuf::uint64 value) {
  unit_tags_.Add(value);
  // @@protoc_insertion_point(field_add:SC2APIProtocol.ActionRawToggleAutocast.unit_tags)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ActionRawToggleAutocast::unit_tags() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.ActionRawToggleAutocast.unit_tags)
  return unit_tags_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ActionRawToggleAutocast::mutable_unit_tags() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.ActionRawToggleAutocast.unit_tags)
  return &unit_tags_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace SC2APIProtocol

// @@protoc_insertion_point(global_scope)
